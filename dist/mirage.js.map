{"version":3,"sources":["_version.ts","core/LayoutNode.ts","Panel.ts","Canvas.ts","Enums.ts","Grid.ts","IColumnDefinition.ts","IGridLength.ts","IRenderAdapter.ts","IRowDefinition.ts","Point.ts","Rect.ts","Size.ts","StackPanel.ts","Thickness.ts","core/Arranger.ts","core/DefaultLayoutTree.ts","core/LayoutFlags.ts","core/Measurer.ts","core/util.ts","draft/ArrangeDrafter.ts","draft/Drafter.ts","draft/MeasureDrafter.ts","draft/SlotDrafter.ts","grid/GridArrangeOverride.ts","grid/GridMeasureOverride.ts","grid/design/Arrange.ts","grid/design/GridPlacement.ts","grid/design/GridShape.ts","grid/design/helpers.ts","grid/design/IGridDesign.ts","grid/design/Measure.ts","grid/design/MeasureOverridePass.ts","grid/design/Segment.ts"],"names":["mirage","mirage.core","mirage.core.LayoutNode","mirage.core.LayoutNode.constructor","mirage.core.LayoutNode.init","mirage.core.LayoutNode.createInputs","mirage.core.LayoutNode.createState","mirage.core.LayoutNode.createTree","mirage.core.LayoutNode.createMeasurer","mirage.core.LayoutNode.createArranger","mirage.core.LayoutNode.visible","mirage.core.LayoutNode.useLayoutRounding","mirage.core.LayoutNode.margin","mirage.core.LayoutNode.width","mirage.core.LayoutNode.height","mirage.core.LayoutNode.minWidth","mirage.core.LayoutNode.minHeight","mirage.core.LayoutNode.maxWidth","mirage.core.LayoutNode.maxHeight","mirage.core.LayoutNode.horizontalAlignment","mirage.core.LayoutNode.verticalAlignment","mirage.core.LayoutNode.getAttached","mirage.core.LayoutNode.setAttached","mirage.core.LayoutNode.setParent","mirage.core.LayoutNode.onDetached","mirage.core.LayoutNode.onAttached","mirage.core.LayoutNode.walkDeep","mirage.core.LayoutNode.walkDeep.step","mirage.core.LayoutNode.walkDeep.skipBranch","mirage.core.LayoutNode.invalidateMeasure","mirage.core.LayoutNode.doMeasure","mirage.core.LayoutNode.measure","mirage.core.LayoutNode.measureOverride","mirage.core.LayoutNode.invalidateArrange","mirage.core.LayoutNode.doArrange","mirage.core.LayoutNode.arrange","mirage.core.LayoutNode.arrangeOverride","mirage.core.LayoutNode.slot","mirage.core.onNodeSizeInputsChanged","mirage.Panel","mirage.Panel.constructor","mirage.Panel.createTree","mirage.Panel.measureOverride","mirage.Panel.arrangeOverride","mirage.Panel.childCount","mirage.Panel.insertChild","mirage.Panel.prependChild","mirage.Panel.appendChild","mirage.Panel.removeChild","mirage.Panel.removeChildAt","mirage.Panel.getChildAt","mirage.NewPanelTree","mirage.NewPanelTree.step","mirage.Canvas","mirage.Canvas.constructor","mirage.Canvas.getLeft","mirage.Canvas.setLeft","mirage.Canvas.getTop","mirage.Canvas.setTop","mirage.Canvas.measureOverride","mirage.Canvas.arrangeOverride","mirage.HorizontalAlignment","mirage.VerticalAlignment","mirage.Orientation","mirage.Grid","mirage.Grid.constructor","mirage.Grid.getColumn","mirage.Grid.setColumn","mirage.Grid.getColumnSpan","mirage.Grid.setColumnSpan","mirage.Grid.getRow","mirage.Grid.setRow","mirage.Grid.getRowSpan","mirage.Grid.setRowSpan","mirage.Grid.init","mirage.Grid.rowDefinitions","mirage.Grid.columnDefinitions","mirage.Grid.createInputs","mirage.Grid.createState","mirage.Grid.measureOverride","mirage.Grid.arrangeOverride","mirage.invalidateCell","mirage.NewColumnDefinitions","mirage.NewColumnDefinition","mirage.NewColumnDefinition.getActualWidth","mirage.NewColumnDefinition.setActualWidth","mirage.GridUnitType","mirage.parseGridLength","mirage.adapters","mirage.adapters.register","mirage.adapters.unregister","mirage.adapters.updateSlots","mirage.NewRowDefinitions","mirage.NewRowDefinition","mirage.NewRowDefinition.getActualHeight","mirage.NewRowDefinition.setActualHeight","mirage.Point","mirage.Point.constructor","mirage.Point.isEqual","mirage.Point.copyTo","mirage.Point.round","mirage.Rect","mirage.Rect.constructor","mirage.Rect.clear","mirage.Rect.isEqual","mirage.Rect.isEmpty","mirage.Rect.copyTo","mirage.Rect.isUndef","mirage.Rect.undef","mirage.Size","mirage.Size.constructor","mirage.Size.copyTo","mirage.Size.isEqual","mirage.Size.isEmpty","mirage.Size.max","mirage.Size.min","mirage.Size.round","mirage.Size.clear","mirage.Size.isUndef","mirage.Size.undef","mirage.StackPanel","mirage.StackPanel.constructor","mirage.StackPanel.orientation","mirage.StackPanel.createInputs","mirage.StackPanel.measureOverride","mirage.StackPanel.measureVertical","mirage.StackPanel.measureHorizontal","mirage.StackPanel.arrangeOverride","mirage.StackPanel.arrangeVertical","mirage.StackPanel.arrangeHorizontal","mirage.Thickness","mirage.Thickness.constructor","mirage.Thickness.isEqual","mirage.Thickness.growSize","mirage.Thickness.shrinkSize","mirage.Thickness.shrinkRect","mirage.core.NewArranger","mirage.core.NewArranger.calcOffer","mirage.core.NewArranger.calcVisualOffset","mirage.core.DefaultLayoutTree","mirage.core.DefaultLayoutTree.applyTemplate","mirage.core.DefaultLayoutTree.propagateFlagUp","mirage.core.DefaultLayoutTree.walk","mirage.core.DefaultLayoutTree.walk.step","mirage.core.LayoutFlags","mirage.core.NewMeasurer","mirage.core.coerceSize","mirage.draft","mirage.draft.NewArrangeDrafter","mirage.draft.NewArrangeDrafter.flush","mirage.draft.NewArrangeDrafter.prepare","mirage.draft.NewArrangeDrafter.draft","mirage.draft.NewDrafter","mirage.draft.NewDrafter.runDraft","mirage.draft.NewMeasureDrafter","mirage.draft.NewMeasureDrafter.prepare","mirage.draft.NewMeasureDrafter.draft","mirage.draft.NewSlotDrafter","mirage.draft.NewSlotDrafter.flush","mirage.draft.NewSlotDrafter.prepare","mirage.draft.NewSlotDrafter.draft","mirage.draft.NewSlotDrafter.notify","mirage.grid","mirage.grid.NewGridArrangeOverride","mirage.grid.NewGridMeasureOverride","mirage.grid.design","mirage.grid.design.NewGridArrangeDesign","mirage.grid.design.NewGridArrangeDesign.init","mirage.grid.design.NewGridArrangeDesign.calcChildRect","mirage.grid.design.originalToOffered","mirage.grid.design.NewGridPlacement","mirage.grid.design.NewGridPlacement.init","mirage.grid.design.NewGridPlacement.add","mirage.grid.design.NewGridPlacement.allocate","mirage.grid.design.NewGridShape","mirage.grid.design.GridChildShape","mirage.grid.design.GridChildShape.constructor","mirage.grid.design.GridChildShape.init","mirage.grid.design.GridChildShape.shouldMeasurePass","mirage.grid.design.GridChildShape.calcConstraint","mirage.grid.design.helpers","mirage.grid.design.helpers.expand","mirage.grid.design.helpers.assignSize","mirage.grid.design.helpers.calcDesiredToOffered","mirage.grid.design.NewGridDesign","mirage.grid.design.NewGridMeasureDesign","mirage.grid.design.NewGridMeasureDesign.init","mirage.grid.design.NewGridMeasureDesign.measureChild","mirage.grid.design.NewGridMeasureDesign.finishPass","mirage.grid.design.NewGridMeasureDesign.finish","mirage.grid.design.NewGridMeasureDesign.getDesired","mirage.grid.design.ensureMatrix","mirage.grid.design.prepareCols","mirage.grid.design.prepareRows","mirage.grid.design.allocateDesiredSizeFunc","mirage.grid.design.allocateDesiredSizeFunc.hasStarInSpan","mirage.grid.design.allocateDesiredSizeFunc.calcDesired","mirage.grid.design.allocateDesiredSizeFunc.allocSegments","mirage.grid.design.MeasureOverridePass","mirage.grid.design.NewMeasureOverridePass","mirage.grid.design.Segment","mirage.grid.design.Segment.constructor","mirage.grid.design.Segment.clamp","mirage.grid.design.Segment.init"],"mappings":"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A,GAAgBA,CAACA;QACrBA,IAAIA,GAAGA,GAAGA,CAACA,CAACA;QACZA,IAAIA,GAAGA,GAAGA,MAAMA,CAACA,iBAAiBA,CAACA;QAEnCA,MAAMA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA;YACvBA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA,sBAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACpCA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,SAASA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,EAAEA,SAASA,CAACA,CAACA,CAACA;iBACrBA,CAACA;gBACFA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA,sBAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACpCA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,SAASA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,EAAEA,SAASA,CAACA,CAACA,CAACA;iBACrBA,CAACA;gBACFA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,KAAKA,CAACA;YACVA;gBACIA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,CAACA;oBACRA,IAAIA,EAAEA,mBAAYA,CAACA,IAAIA;iBAC1BA,CAACA;gBACFA,KAAKA,CAACA;QACdA,CAACA;QAEDA,IAAIA,MAAMA,GAAGA,GAAGA,CAACA;QACjBA,MAAMA,CAACA;YACHA,MAAMA,EAAEA,GAAGA;YACXA,SAASA,EAAEA,GAAGA;YACdA,SAASA,EAAEA,GAAGA;YACdA,eAAeA;gBACXC,MAAMA,CAACA,MAAMA,CAACA;YAClBA,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","file":"mirage.js","sourcesContent":["module mirage {\r\n    export var version = '0.1.0';\r\n}","namespace mirage.core {\n    export interface ILayoutNodeInputs {\n        visible: boolean;\n        useLayoutRounding: boolean;\n        margin: Thickness;\n        width: number;\n        height: number;\n        minWidth: number;\n        minHeight: number;\n        maxWidth: number;\n        maxHeight: number;\n        horizontalAlignment: HorizontalAlignment;\n        verticalAlignment: VerticalAlignment;\n        attached: ILayoutNodeAttachedInputs;\n    }\n\n    export interface ILayoutNodeAttachedInputs {\n        [property: string]: any;\n    }\n\n    export interface ILayoutNodeState {\n        flags: LayoutFlags;\n        lastAvailable: ISize;\n        desiredSize: ISize;\n        hiddenDesire: ISize;\n        layoutSlot: IRect;\n        arrangedSlot: IRect;\n        lastArrangedSlot: IRect;\n    }\n\n    export interface ILayoutTreeDeepWalker {\n        current: LayoutNode;\n        step(): boolean;\n        skipBranch();\n    }\n\n    export class LayoutNode {\n        inputs: ILayoutNodeInputs;\n        state: ILayoutNodeState;\n        tree: ILayoutTree;\n\n        private $measurer: core.IMeasurer;\n        private $arranger: core.IArranger;\n\n        constructor() {\n            this.init();\n        }\n\n        init() {\n            Object.defineProperties(this, {\n                \"inputs\": {value: this.createInputs(), writable: false},\n                \"state\": {value: this.createState(), writable: false},\n                \"tree\": {value: this.createTree(), writable: false},\n                \"attached\": {value: {}, writable: false},\n            });\n            this.$measurer = this.createMeasurer();\n            this.$arranger = this.createArranger();\n        }\n\n        protected createInputs(): ILayoutNodeInputs {\n            return {\n                visible: true,\n                useLayoutRounding: true,\n                margin: new Thickness(),\n                width: NaN,\n                height: NaN,\n                minWidth: 0.0,\n                minHeight: 0.0,\n                maxWidth: Number.POSITIVE_INFINITY,\n                maxHeight: Number.POSITIVE_INFINITY,\n                horizontalAlignment: HorizontalAlignment.stretch,\n                verticalAlignment: VerticalAlignment.stretch,\n                attached: {},\n            };\n        }\n\n        protected createState(): ILayoutNodeState {\n            return {\n                flags: LayoutFlags.none,\n                lastAvailable: new Size(NaN, NaN),\n                desiredSize: new Size(),\n                hiddenDesire: new Size(),\n                layoutSlot: new Rect(NaN, NaN, NaN, NaN),\n                arrangedSlot: new Rect(),\n                lastArrangedSlot: new Rect(NaN, NaN, NaN, NaN),\n            };\n        }\n\n        protected createTree(): ILayoutTree {\n            return DefaultLayoutTree();\n        }\n\n        protected createMeasurer(): core.IMeasurer {\n            return core.NewMeasurer(this.inputs, this.state, this.tree, constraint => this.measureOverride(constraint));\n        }\n\n        protected createArranger(): core.IArranger {\n            return core.NewArranger(this.inputs, this.state, this.tree, arrangeSize => this.arrangeOverride(arrangeSize));\n        }\n\n        // PROPERTIES\n\n        get visible(): boolean {\n            return this.inputs.visible;\n        }\n\n        set visible(value: boolean) {\n            if (this.inputs.visible === value)\n                return;\n            this.inputs.visible = value === true;\n            this.invalidateMeasure();\n            var parent = this.tree.parent;\n            if (parent)\n                parent.invalidateMeasure();\n        }\n\n        get useLayoutRounding(): boolean {\n            return this.inputs.useLayoutRounding;\n        }\n\n        set useLayoutRounding(value: boolean) {\n            if (this.inputs.useLayoutRounding === value)\n                return;\n            this.inputs.useLayoutRounding = value === true;\n            this.invalidateMeasure();\n            this.invalidateArrange();\n        }\n\n        get margin(): Thickness {\n            return this.inputs.margin;\n        }\n\n        set margin(value: Thickness) {\n            if (Thickness.isEqual(this.inputs.margin, value))\n                return;\n            this.inputs.margin = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get width(): number {\n            return this.inputs.width;\n        }\n\n        set width(value: number) {\n            if (this.inputs.width === value)\n                return;\n            this.inputs.width = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get height(): number {\n            return this.inputs.height;\n        }\n\n        set height(value: number) {\n            if (this.inputs.height === value)\n                return;\n            this.inputs.height = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get minWidth(): number {\n            return this.inputs.minWidth;\n        }\n\n        set minWidth(value: number) {\n            if (this.inputs.minWidth === value)\n                return;\n            this.inputs.minWidth = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get minHeight(): number {\n            return this.inputs.minHeight;\n        }\n\n        set minHeight(value: number) {\n            if (this.inputs.minHeight === value)\n                return;\n            this.inputs.minHeight = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get maxWidth(): number {\n            return this.inputs.maxWidth;\n        }\n\n        set maxWidth(value: number) {\n            if (this.inputs.maxWidth === value)\n                return;\n            this.inputs.maxWidth = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get maxHeight(): number {\n            return this.inputs.maxHeight;\n        }\n\n        set maxHeight(value: number) {\n            if (this.inputs.maxHeight === value)\n                return;\n            this.inputs.maxHeight = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get horizontalAlignment(): HorizontalAlignment {\n            return this.inputs.horizontalAlignment;\n        }\n\n        set horizontalAlignment(value: HorizontalAlignment) {\n            if (this.inputs.horizontalAlignment === value)\n                return;\n            this.inputs.horizontalAlignment = value;\n            this.invalidateArrange();\n        }\n\n        get verticalAlignment(): VerticalAlignment {\n            return this.inputs.verticalAlignment;\n        }\n\n        set verticalAlignment(value: VerticalAlignment) {\n            if (this.inputs.verticalAlignment === value)\n                return;\n            this.inputs.verticalAlignment = value;\n            this.invalidateArrange();\n        }\n\n        // ATTACHED\n\n        getAttached(property: string): any {\n            return this.inputs.attached[property];\n        }\n\n        setAttached(property: string, value: any) {\n            this.inputs.attached[property] = value;\n        }\n\n        // TREE\n\n        setParent(parent: LayoutNode) {\n            if (!parent) {\n                if (!this.tree.parent)\n                    return;\n                this.tree.parent = null;\n                this.onDetached();\n            } else {\n                if (parent === this.tree.parent)\n                    return;\n                this.tree.parent = null;\n                this.onDetached();\n                this.tree.parent = parent;\n                this.onAttached();\n            }\n        }\n\n        protected onDetached() {\n            this.invalidateMeasure();\n            if (this.tree.parent)\n                this.tree.parent.invalidateMeasure();\n            Rect.undef(this.state.layoutSlot);\n        }\n\n        protected onAttached() {\n            var state = this.state;\n            Size.undef(state.lastAvailable);\n            Rect.undef(state.layoutSlot);\n            Size.clear(state.arrangedSlot);\n            this.invalidateMeasure();\n            this.invalidateArrange();\n            if ((state.flags & LayoutFlags.slotHint) > 0 || !Rect.isUndef(state.lastArrangedSlot)) {\n                this.tree.propagateFlagUp(LayoutFlags.slotHint);\n            }\n        }\n\n        walkDeep(reverse?: boolean): ILayoutTreeDeepWalker {\n            var last: LayoutNode = undefined;\n            var walkList: LayoutNode[] = [this];\n\n            return {\n                current: undefined,\n                step(): boolean {\n                    if (last) {\n                        for (var subwalker = last.tree.walk(reverse); subwalker.step();) {\n                            walkList.unshift(subwalker.current);\n                        }\n                    }\n\n                    this.current = last = walkList.shift();\n                    return this.current !== undefined;\n                },\n                skipBranch() {\n                    last = undefined;\n                },\n            };\n        }\n\n        // LAYOUT\n\n        invalidateMeasure() {\n            this.state.flags |= LayoutFlags.measure | LayoutFlags.measureHint;\n            this.tree.propagateFlagUp(LayoutFlags.measureHint);\n        }\n\n        doMeasure(): boolean {\n            var parent = this.tree.parent;\n            var available = new Size();\n            Size.copyTo(this.state.lastAvailable, available);\n            if (!parent && Size.isUndef(available))\n                available.width = available.height = Number.POSITIVE_INFINITY;\n\n            var success = false;\n            if (!Size.isUndef(available)) {\n                var oldDesired = new Size();\n                var newDesired = this.state.desiredSize;\n                Size.copyTo(newDesired, oldDesired);\n                success = this.$measurer(available);\n                if (Size.isEqual(oldDesired, newDesired))\n                    return success;\n            }\n\n            if (parent)\n                parent.invalidateMeasure();\n\n            this.state.flags &= ~LayoutFlags.measure;\n            return success;\n        }\n\n        measure(availableSize: ISize): boolean {\n            return this.$measurer(availableSize);\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            var desired = new Size();\n            for (var walker = this.tree.walk(); walker.step();) {\n                walker.current.measure(constraint);\n                Size.max(desired, walker.current.state.desiredSize);\n            }\n            return desired;\n        }\n\n        invalidateArrange() {\n            this.state.flags |= LayoutFlags.arrange | LayoutFlags.arrangeHint;\n            this.tree.propagateFlagUp(LayoutFlags.arrangeHint);\n        }\n\n        doArrange(rootSize: ISize): boolean {\n            var parent = this.tree.parent;\n            var final = new Rect();\n            if (!parent) {\n                // A root element will always use root size for arrange\n                Size.copyTo(rootSize, final);\n            } else {\n                // If we are starting an arrange from a non-root element,\n                //   our measure developed a desired size that *did not*\n                //   cause a further invalidation up the tree\n                // This means that our desired size *is* our final for arrange\n                Size.copyTo(this.state.desiredSize, final);\n            }\n\n            if (!Rect.isUndef(final))\n                return this.$arranger(final);\n\n            if (parent)\n                parent.invalidateArrange();\n\n            return false;\n        }\n\n        arrange(finalRect: IRect): boolean {\n            return this.$arranger(finalRect);\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            var arranged = new Size(arrangeSize.width, arrangeSize.height);\n            for (var walker = this.tree.walk(); walker.step();) {\n                var childRect = new Rect(0, 0, arrangeSize.width, arrangeSize.height);\n                walker.current.arrange(childRect);\n            }\n            return arranged;\n        }\n\n        slot(oldRect: IRect, newRect: IRect): boolean {\n            var state = this.state;\n            if (!Rect.isUndef(state.lastArrangedSlot))\n                Rect.copyTo(state.lastArrangedSlot, oldRect);\n            Rect.copyTo(state.arrangedSlot, newRect);\n            Rect.undef(state.lastArrangedSlot);\n            // TODO: Set actualWidth, actualHeight\n            return true;\n        }\n    }\n\n    function onNodeSizeInputsChanged(node: core.LayoutNode) {\n        node.invalidateMeasure();\n        node.invalidateArrange();\n        var parent = node.tree.parent;\n        if (parent)\n            parent.invalidateMeasure();\n    }\n}","/// <reference path=\"core/LayoutNode\" />\n\nnamespace mirage {\n    export class Panel extends core.LayoutNode {\n        tree: IPanelTree;\n\n        protected createTree(): core.ILayoutTree {\n            return NewPanelTree();\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            return new Size(constraint.width, constraint.height);\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            return new Size(arrangeSize.width, arrangeSize.height);\n        }\n\n        get childCount(): number {\n            return this.tree.children.length;\n        }\n\n        insertChild(child: core.LayoutNode, index: number) {\n            var children = this.tree.children;\n            if (index >= children.length) {\n                this.appendChild(child);\n            } else if (index <= 0) {\n                this.prependChild(child);\n            } else {\n                children.splice(index, 0, child);\n                child.setParent(this);\n            }\n        }\n\n        prependChild(child: core.LayoutNode) {\n            this.tree.children.unshift(child);\n            child.setParent(this);\n        }\n\n        appendChild(child: core.LayoutNode) {\n            this.tree.children.push(child);\n            child.setParent(this);\n        }\n\n        removeChild(child: core.LayoutNode): boolean {\n            var children = this.tree.children;\n            var index = children.indexOf(child);\n            if (index < 0)\n                return false;\n            this.tree.children.splice(index, 1);\n            child.setParent(null);\n            return true;\n        }\n\n        removeChildAt(index: number): core.LayoutNode {\n            var children = this.tree.children;\n            if (index < 0 || index >= children.length)\n                return null;\n            var removed = children.splice(index, 1)[0];\n            if (removed)\n                removed.setParent(null);\n            return removed;\n        }\n\n        getChildAt(index: number): core.LayoutNode {\n            return this.tree.children[index];\n        }\n    }\n\n    export interface IPanelTree extends core.ILayoutTree {\n        children: core.LayoutNode[];\n    }\n\n    export function NewPanelTree(): IPanelTree {\n        var tree = <IPanelTree>core.DefaultLayoutTree();\n        tree.children = [];\n        tree.walk = (reverse?: boolean): core.ILayoutTreeWalker => {\n            if (!reverse) {\n                var i = -1;\n                return {\n                    current: undefined,\n                    step(): boolean {\n                        i++;\n                        if (i >= tree.children.length) {\n                            this.current = undefined;\n                            return false;\n                        }\n                        this.current = tree.children[i];\n                        return true;\n                    },\n                };\n            } else {\n                var i = tree.children.length;\n                return {\n                    current: undefined,\n                    step(): boolean {\n                        i--;\n                        if (i < 0) {\n                            this.current = undefined;\n                            return false;\n                        }\n                        this.current = tree.children[i];\n                        return true;\n                    },\n                }\n            }\n        };\n        return tree;\n    }\n}","/// <reference path=\"Panel\" />\n\nnamespace mirage {\n    export class Canvas extends Panel {\n        static getLeft(node: core.LayoutNode): number {\n            return node.getAttached(\"canvas.left\");\n        }\n\n        static setLeft(node: core.LayoutNode, value: number) {\n            node.setAttached(\"canvas.left\", value);\n            node.invalidateArrange();\n        }\n\n        static getTop(node: core.LayoutNode): number {\n            return node.getAttached(\"canvas.top\");\n        }\n\n        static setTop(node: core.LayoutNode, value: number) {\n            node.setAttached(\"canvas.top\", value);\n            node.invalidateArrange();\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            var available = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n            for (var walker = this.tree.walk(); walker.step();) {\n                walker.current.measure(available);\n            }\n            return new Size();\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            var cr = new Rect();\n            for (var walker = this.tree.walk(); walker.step();) {\n                let child = walker.current;\n                //NOTE: Coercing undefined, null, NaN, and 0 to 0\n                cr.x = Canvas.getLeft(child) || 0;\n                cr.y = Canvas.getTop(child) || 0;\n                Size.copyTo(child.state.desiredSize, cr);\n                child.arrange(cr);\n            }\n            return arrangeSize;\n        }\n    }\n}","namespace mirage {\n    export enum HorizontalAlignment {\n        left = 0,\n        center = 1,\n        right = 2,\n        stretch = 3,\n    }\n    export enum VerticalAlignment {\n        top = 0,\n        center = 1,\n        bottom = 2,\n        stretch = 3,\n    }\n    export enum Orientation {\n        horizontal = 0,\n        vertical = 1,\n    }\n}","/// <reference path=\"Panel\" />\n\nnamespace mirage {\n    export interface IGridInputs extends core.ILayoutNodeInputs {\n        rowDefinitions: IRowDefinition[];\n        columnDefinitions: IColumnDefinition[];\n    }\n\n    export interface IGridState extends core.ILayoutNodeState {\n        design: grid.design.IGridDesign;\n    }\n\n    export class Grid extends Panel {\n        static getColumn(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.column\");\n        }\n\n        static setColumn(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.column\", value);\n            invalidateCell(node);\n        }\n\n        static getColumnSpan(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.column-span\");\n        }\n\n        static setColumnSpan(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.column-span\", value);\n            invalidateCell(node);\n        }\n\n        static getRow(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.row\");\n        }\n\n        static setRow(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.row\", value);\n            invalidateCell(node);\n        }\n\n        static getRowSpan(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.row-span\");\n        }\n\n        static setRowSpan(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.row-span\", value);\n            invalidateCell(node);\n        }\n\n        inputs: IGridInputs;\n        state: IGridState;\n\n        private $measureOverride: core.IMeasureOverride;\n        private $arrangeOverride: core.IArrangeOverride;\n\n        init() {\n            super.init();\n            this.$measureOverride = grid.NewGridMeasureOverride(this.inputs, this.state, this.tree);\n            this.$arrangeOverride = grid.NewGridArrangeOverride(this.inputs, this.state, this.tree);\n        }\n\n        get rowDefinitions(): IRowDefinition[] {\n            return this.inputs.rowDefinitions;\n        }\n\n        set rowDefinitions(value: IRowDefinition[]) {\n            this.inputs.rowDefinitions = value;\n            this.invalidateMeasure();\n        }\n\n        get columnDefinitions(): IColumnDefinition[] {\n            return this.inputs.columnDefinitions;\n        }\n\n        set columnDefinitions(value: IColumnDefinition[]) {\n            this.inputs.columnDefinitions = value;\n            this.invalidateMeasure();\n        }\n\n        protected createInputs(): IGridInputs {\n            var inputs = <IGridInputs>super.createInputs();\n            inputs.rowDefinitions = [];\n            inputs.columnDefinitions = [];\n            return inputs;\n        }\n\n        protected createState(): IGridState {\n            var state = <IGridState>super.createState();\n            state.design = grid.design.NewGridDesign();\n            return state;\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            return this.$measureOverride(constraint);\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            return this.$arrangeOverride(arrangeSize);\n        }\n    }\n\n    function invalidateCell(node: core.LayoutNode) {\n        var parent = node.tree.parent;\n        if (parent instanceof Grid)\n            parent.invalidateMeasure();\n        node.invalidateMeasure();\n    }\n}","namespace mirage {\n    export interface IColumnDefinition {\n        width: IGridLength;\n        minWidth: number;\n        maxWidth: number;\n        getActualWidth(): number;\n\n        /// WARNING: This should only be used by engine\n        setActualWidth(value: number);\n    }\n\n    export function NewColumnDefinitions(defs: string): IColumnDefinition[] {\n        var coldefs: IColumnDefinition[] = [];\n        for (var i = 0, tokens = defs.split(\" \"); i < tokens.length; i++) {\n            let token = tokens[i];\n            if (token === \" \")\n                continue;\n            coldefs.push(NewColumnDefinition(token));\n        }\n        return coldefs;\n    }\n\n    export function NewColumnDefinition(): IColumnDefinition;\n    export function NewColumnDefinition(width: string): IColumnDefinition;\n    export function NewColumnDefinition(widthValue: number, widthType: GridUnitType): IColumnDefinition;\n    export function NewColumnDefinition(width: string, minWidth: number, maxWidth: number): IColumnDefinition;\n    export function NewColumnDefinition(widthValue: number, widthType: GridUnitType, minWidth: number, maxWidth: number): IColumnDefinition;\n    export function NewColumnDefinition(): IColumnDefinition {\n        var len: IGridLength;\n        var min = 0;\n        var max = Number.POSITIVE_INFINITY;\n\n        switch (arguments.length) {\n            case 1:\n                len = parseGridLength(arguments[0]);\n                break;\n            case 2:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                break;\n            case 3:\n                len = parseGridLength(arguments[0]);\n                min = arguments[1];\n                max = arguments[2];\n                break;\n            case 4:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                min = arguments[2];\n                max = arguments[3];\n                break;\n            default:\n                len = {\n                    value: 1,\n                    type: GridUnitType.star,\n                };\n                break;\n        }\n\n        var actual = NaN;\n        return {\n            width: len,\n            minWidth: min,\n            maxWidth: max,\n            getActualWidth(): number {\n                return actual;\n            },\n            setActualWidth(value: number) {\n                actual = value;\n            },\n        };\n    }\n}","namespace mirage {\n    export enum GridUnitType {\n        auto = 0,\n        pixel = 1,\n        star = 2,\n    }\n\n    export interface IGridLength {\n        value: number;\n        type: GridUnitType;\n    }\n\n    export function parseGridLength(s: string): IGridLength {\n        var auto = {value: 0, type: GridUnitType.auto};\n        if (s === \"auto\") {\n            return auto;\n        }\n        if (s[s.length - 1] === \"*\") {\n            if (s.length === 1)\n                return {value: 1, type: GridUnitType.star};\n            return {\n                value: parseInt(s.substr(0, s.length - 1)),\n                type: GridUnitType.star,\n            };\n        }\n        return {\n            value: parseInt(s),\n            type: GridUnitType.pixel,\n        };\n    }\n}","namespace mirage.adapters {\n    export interface IRenderAdapter {\n        updateSlots(updates: draft.ISlotUpdate[]);\n    }\n\n    var registered: IRenderAdapter[] = [];\n\n    export function register(adapter: IRenderAdapter) {\n        if (registered.indexOf(adapter) < 0) {\n            registered.push(adapter);\n        }\n    }\n\n    export function unregister(adapter: IRenderAdapter) {\n        var index = registered.indexOf(adapter);\n        if (index > -1)\n            registered.splice(index, 1);\n    }\n\n    export function updateSlots(updates: draft.ISlotUpdate[]) {\n        for (var i = 0; i < registered.length; i++) {\n            registered[i].updateSlots(updates);\n        }\n    }\n}","namespace mirage {\n    export interface IRowDefinition {\n        height: IGridLength;\n        minHeight: number;\n        maxHeight: number;\n        getActualHeight(): number;\n\n        /// WARNING: This should only be used by engine\n        setActualHeight(value: number);\n    }\n\n    export function NewRowDefinitions(defs: string): IRowDefinition[] {\n        var rowdefs: IRowDefinition[] = [];\n        for (var i = 0, tokens = defs.split(\" \"); i < tokens.length; i++) {\n            let token = tokens[i];\n            if (token === \" \")\n                continue;\n            rowdefs.push(NewRowDefinition(token));\n        }\n        return rowdefs;\n    }\n\n    export function NewRowDefinition(): IRowDefinition;\n    export function NewRowDefinition(height: string): IRowDefinition;\n    export function NewRowDefinition(heightValue: number, heightType: GridUnitType): IRowDefinition;\n    export function NewRowDefinition(height: string, minHeight: number, maxHeight: number): IRowDefinition;\n    export function NewRowDefinition(heightValue: number, heightType: GridUnitType, minHeight: number, maxHeight: number): IRowDefinition;\n    export function NewRowDefinition(): IRowDefinition {\n        var len: IGridLength;\n        var min = 0;\n        var max = Number.POSITIVE_INFINITY;\n\n        switch (arguments.length) {\n            case 1:\n                len = parseGridLength(arguments[0]);\n                break;\n            case 2:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                break;\n            case 3:\n                len = parseGridLength(arguments[0]);\n                min = arguments[1];\n                max = arguments[2];\n                break;\n            case 4:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                min = arguments[2];\n                max = arguments[3];\n                break;\n            default:\n                len = {\n                    value: 1,\n                    type: GridUnitType.star,\n                };\n                break;\n        }\n\n        var actual = NaN;\n        return {\n            height: len,\n            minHeight: min,\n            maxHeight: max,\n            getActualHeight(): number {\n                return actual;\n            },\n            setActualHeight(value: number) {\n                actual = value;\n            },\n        };\n    }\n}","namespace mirage {\r\n    export interface IPoint {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\r\n    export class Point implements IPoint {\r\n        x: number;\r\n        y: number;\r\n\r\n        constructor(x?: number, y?: number) {\r\n            this.x = x == null ? 0 : x;\r\n            this.y = y == null ? 0 : y;\r\n        }\r\n\r\n        static isEqual(p1: IPoint, p2: IPoint): boolean {\r\n            return p1.x === p2.x\r\n                && p1.y === p2.y;\r\n        }\r\n\r\n        static copyTo(src: IPoint, dest: IPoint) {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n        }\r\n\r\n        static round(dest: IPoint) {\r\n            dest.x = Math.round(dest.x);\r\n            dest.y = Math.round(dest.y);\r\n        }\r\n    }\r\n}","namespace mirage {\r\n    export interface IRect extends IPoint, ISize {\r\n    }\r\n\r\n    export class Rect implements IRect {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n\r\n        constructor(x?: number, y?: number, width?: number, height?: number) {\r\n            this.x = x == null ? 0 : x;\r\n            this.y = y == null ? 0 : y;\r\n            this.width = width == null ? 0 : width;\r\n            this.height = height == null ? 0 : height;\r\n        }\r\n\r\n        static clear(rect: IRect) {\r\n            rect.x = rect.y = rect.width = rect.height = 0;\r\n        }\r\n\r\n        static isEqual(rect1: IRect, rect2: IRect): boolean {\r\n            return rect1.x === rect2.x\r\n                && rect1.y === rect2.y\r\n                && rect1.width === rect2.width\r\n                && rect1.height === rect2.height;\r\n        }\r\n\r\n        static isEmpty(src: IRect): boolean {\r\n            return src.width === 0\r\n                || src.height === 0;\r\n        }\r\n\r\n        static copyTo(src: IRect, dest: IRect) {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n        }\r\n\r\n        static isUndef(rect: IRect): boolean {\r\n            return isNaN(rect.x)\r\n                && isNaN(rect.y)\r\n                && isNaN(rect.width)\r\n                && isNaN(rect.height);\r\n        }\r\n\r\n        static undef(rect: IRect) {\r\n            rect.x = NaN;\r\n            rect.y = NaN;\r\n            rect.width = NaN;\r\n            rect.height = NaN;\r\n        }\r\n    }\r\n}","namespace mirage {\r\n    export interface ISize {\r\n        width: number;\r\n        height: number;\r\n    }\r\n\r\n    export class Size implements ISize {\r\n        width: number;\r\n        height: number;\r\n\r\n        constructor(width?: number, height?: number) {\r\n            this.width = width == null ? 0 : width;\r\n            this.height = height == null ? 0 : height;\r\n        }\r\n\r\n        static copyTo(src: ISize, dest: ISize) {\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n        }\r\n\r\n        static isEqual(size1: ISize, size2: ISize): boolean {\r\n            return size1.width === size2.width\r\n                && size1.height === size2.height;\r\n        }\r\n\r\n        static isEmpty(size: Size): boolean {\r\n            return size.width === 0\r\n                || size.height === 0;\r\n        }\r\n\r\n        static max(dest: ISize, size2: ISize) {\r\n            dest.width = Math.max(dest.width, size2.width);\r\n            dest.height = Math.max(dest.height, size2.height);\r\n        }\r\n\r\n        static min(dest: ISize, size2: ISize) {\r\n            dest.width = Math.min(dest.width, size2.width);\r\n            dest.height = Math.min(dest.height, size2.height);\r\n        }\r\n\r\n        static round(size: ISize) {\r\n            size.width = Math.round(size.width);\r\n            size.height = Math.round(size.height);\r\n        }\r\n\r\n        static clear(size: ISize) {\r\n            size.width = 0;\r\n            size.height = 0;\r\n        }\r\n\r\n        static isUndef(size: ISize): boolean {\r\n            return isNaN(size.width)\r\n                && isNaN(size.height);\r\n        }\r\n\r\n        static undef(size: ISize) {\r\n            size.width = NaN;\r\n            size.height = NaN;\r\n        }\r\n    }\r\n}","namespace mirage {\n    export interface IStackPanelInputs extends core.ILayoutNodeInputs {\n        orientation: Orientation;\n    }\n\n    export class StackPanel extends Panel {\n        inputs: IStackPanelInputs;\n\n        get orientation(): Orientation {\n            return this.inputs.orientation;\n        }\n\n        set orientation(value: Orientation) {\n            if (this.inputs.orientation === value)\n                return;\n            this.inputs.orientation = value;\n            this.invalidateMeasure();\n            this.invalidateArrange();\n        }\n\n        protected createInputs(): IStackPanelInputs {\n            var inputs = <IStackPanelInputs>super.createInputs();\n            inputs.orientation = Orientation.horizontal;\n            return inputs;\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            if (this.inputs.orientation === Orientation.vertical) {\n                return this.measureVertical(constraint);\n            } else {\n                return this.measureHorizontal(constraint);\n            }\n        }\n\n        private measureVertical(constraint: ISize): ISize {\n            var ca = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n            var measured = new Size();\n            var inputs = this.inputs;\n\n            ca.width = constraint.width;\n            if (!isNaN(inputs.width))\n                ca.width = inputs.width;\n            ca.width = Math.min(ca.width, inputs.maxWidth);\n            ca.width = Math.max(ca.width, inputs.minWidth);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                child.measure(ca);\n\n                var childDesired = child.state.desiredSize;\n                measured.height += childDesired.height;\n                measured.width = Math.max(measured.width, childDesired.width);\n            }\n\n            return measured;\n        }\n\n        private measureHorizontal(constraint: ISize): ISize {\n            var ca = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n            var measured = new Size();\n            var inputs = this.inputs;\n\n            ca.height = constraint.height;\n            if (!isNaN(inputs.height))\n                ca.height = inputs.height;\n            ca.height = Math.min(ca.height, inputs.maxHeight);\n            ca.height = Math.max(ca.height, inputs.minHeight);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                child.measure(ca);\n\n                var childDesired = child.state.desiredSize;\n                measured.width += childDesired.width;\n                measured.height = Math.max(measured.height, childDesired.height);\n            }\n\n            return measured;\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            if (this.inputs.orientation === Orientation.vertical) {\n                return this.arrangeVertical(arrangeSize);\n            } else {\n                return this.arrangeHorizontal(arrangeSize);\n            }\n        }\n\n        private arrangeVertical(arrangeSize: ISize): ISize {\n            var arranged = new Size(arrangeSize.width, 0);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                var childDesired = child.state.desiredSize;\n                var childFinal = new Rect(0, arranged.height, arrangeSize.width, childDesired.height);\n                if (Rect.isEmpty(childFinal))\n                    Rect.clear(childFinal);\n\n                child.arrange(childFinal);\n\n                arranged.width = Math.max(arranged.width, arrangeSize.width);\n                arranged.height += childDesired.height;\n            }\n\n            arranged.height = Math.max(arranged.height, arrangeSize.height);\n\n            return arranged;\n        }\n\n        private arrangeHorizontal(arrangeSize: ISize): ISize {\n            var arranged = new Size(0, arrangeSize.height);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                var childDesired = child.state.desiredSize;\n                var childFinal = new Rect(arranged.width, 0, childDesired.width, arrangeSize.height);\n                if (Rect.isEmpty(childFinal))\n                    Rect.clear(childFinal);\n\n                child.arrange(childFinal);\n\n                arranged.width += childDesired.width;\n                arranged.height = Math.max(arranged.height, arrangeSize.height);\n            }\n\n            arranged.width = Math.max(arranged.width, arrangeSize.width);\n\n            return arranged;\n        }\n    }\n}","namespace mirage {\r\n    export class Thickness {\r\n        left: number;\r\n        top: number;\r\n        right: number;\r\n        bottom: number;\r\n\r\n        constructor(left?: number, top?: number, right?: number, bottom?: number) {\r\n            this.left = left == null ? 0 : left;\r\n            this.top = top == null ? 0 : top;\r\n            this.right = right == null ? 0 : right;\r\n            this.bottom = bottom == null ? 0 : bottom;\r\n        }\r\n\r\n        static isEqual(t1: Thickness, t2: Thickness): boolean {\r\n            return t1.left === t2.left\r\n                && t1.top === t2.top\r\n                && t1.right === t2.right\r\n                && t1.bottom === t2.bottom;\r\n        }\r\n\r\n        static growSize(thickness: Thickness, dest: Size) {\r\n            var w = dest.width;\r\n            var h = dest.height;\r\n            if (w != Number.POSITIVE_INFINITY)\r\n                w += thickness.left + thickness.right;\r\n            if (h != Number.POSITIVE_INFINITY)\r\n                h += thickness.top + thickness.bottom;\r\n            dest.width = w > 0 ? w : 0;\r\n            dest.height = h > 0 ? h : 0;\r\n            return dest;\r\n        }\r\n\r\n        static shrinkSize(thickness: Thickness, dest: Size) {\r\n            var w = dest.width;\r\n            var h = dest.height;\r\n            if (w != Number.POSITIVE_INFINITY)\r\n                w -= thickness.left + thickness.right;\r\n            if (h != Number.POSITIVE_INFINITY)\r\n                h -= thickness.top + thickness.bottom;\r\n            dest.width = w > 0 ? w : 0;\r\n            dest.height = h > 0 ? h : 0;\r\n            return dest;\r\n        }\r\n\r\n        static shrinkRect(thickness: Thickness, dest: IRect) {\r\n            dest.x += thickness.left;\r\n            dest.y += thickness.top;\r\n            dest.width -= thickness.left + thickness.right;\r\n            dest.height -= thickness.top + thickness.bottom;\r\n            if (dest.width < 0)\r\n                dest.width = 0;\r\n            if (dest.height < 0)\r\n                dest.height = 0;\r\n        }\r\n    }\r\n}","namespace mirage.core {\n    export interface IArranger {\n        (finalRect: Rect): boolean;\n    }\n    export interface IArrangeOverride {\n        (finalSize: ISize): ISize;\n    }\n\n    export function NewArranger(inputs: ILayoutNodeInputs, state: ILayoutNodeState, tree: ILayoutTree, override: IArrangeOverride): IArranger {\n        function calcOffer(childRect: IRect): ISize {\n            var stretched = new Size(childRect.width, childRect.height);\n            coerceSize(stretched, inputs);\n\n            var framework = new Size();\n            coerceSize(framework, inputs);\n            if (inputs.horizontalAlignment === HorizontalAlignment.stretch) {\n                framework.width = Math.max(framework.width, stretched.width);\n            }\n            if (inputs.verticalAlignment === VerticalAlignment.stretch) {\n                framework.height = Math.max(framework.height, stretched.height);\n            }\n            var offer = new Size(state.hiddenDesire.width, state.hiddenDesire.height);\n            Size.max(offer, framework);\n            return offer;\n        }\n\n        function calcVisualOffset(childRect: IRect, arranged: ISize): IPoint {\n            var constrained = new Size(arranged.width, arranged.height);\n            coerceSize(constrained, inputs);\n            Size.min(constrained, arranged);\n\n            var vo = new Point();\n            Point.copyTo(childRect, vo);\n            switch (inputs.horizontalAlignment) {\n                case HorizontalAlignment.left:\n                    break;\n                case HorizontalAlignment.right:\n                    vo.x += childRect.width - constrained.width;\n                    break;\n                case HorizontalAlignment.center:\n                    vo.x += (childRect.width - constrained.width) * 0.5;\n                    break;\n                default:\n                    vo.x += Math.max((childRect.width - constrained.width) * 0.5, 0);\n                    break;\n            }\n            switch (inputs.verticalAlignment) {\n                case VerticalAlignment.top:\n                    break;\n                case VerticalAlignment.bottom:\n                    vo.y += childRect.height - constrained.height;\n                    break;\n                case VerticalAlignment.center:\n                    vo.y += (childRect.height - constrained.height) * 0.5;\n                    break;\n                default:\n                    vo.y += Math.max((childRect.height - constrained.height) * 0.5, 0);\n                    break;\n            }\n            if (inputs.useLayoutRounding) {\n                Point.round(vo);\n            }\n            return vo;\n        }\n\n        return function (finalRect: Rect): boolean {\n            if (inputs.visible !== true) {\n                return false;\n            }\n\n            // Apply rounding\n            var childRect = new Rect();\n            if (inputs.useLayoutRounding) {\n                childRect.x = Math.round(finalRect.x);\n                childRect.y = Math.round(finalRect.y);\n                childRect.width = Math.round(finalRect.width);\n                childRect.height = Math.round(finalRect.height);\n            } else {\n                Rect.copyTo(finalRect, childRect);\n            }\n\n            // Validate\n            if (childRect.width < 0 || childRect.height < 0\n                || !isFinite(childRect.width) || !isFinite(childRect.height)\n                || isNaN(childRect.x) || isNaN(childRect.y)\n                || isNaN(childRect.width) || isNaN(childRect.height)) {\n                console.warn(\"[mirage] cannot call arrange using rect with NaN/infinite values.\");\n                return false;\n            }\n\n            // Check need to arrange\n            if ((state.flags & LayoutFlags.arrange) <= 0) {\n                return false;\n            }\n            if (Rect.isEqual(state.layoutSlot, childRect)) {\n                return false;\n            }\n            Rect.copyTo(childRect, state.layoutSlot);\n\n            // Prepare offer\n            Thickness.shrinkRect(inputs.margin, childRect);\n            var offer = calcOffer(childRect);\n\n            // Do override\n            var arranged = override(offer);\n\n            // Complete override\n            state.flags &= ~LayoutFlags.arrange;\n            if (inputs.useLayoutRounding) {\n                Size.round(arranged);\n            }\n\n            // Calculate visual offset\n            var vo = calcVisualOffset(childRect, arranged);\n\n            // If arranged slot moved, invalidate slotting\n            if (!Point.isEqual(vo, state.arrangedSlot) || !Size.isEqual(arranged, state.arrangedSlot)) {\n                Rect.copyTo(state.arrangedSlot, state.lastArrangedSlot);\n                state.flags |= LayoutFlags.slotHint;\n                tree.propagateFlagUp(LayoutFlags.slotHint);\n            }\n\n            // Finalize arrangedSlot\n            Size.copyTo(arranged, state.arrangedSlot);\n            Point.copyTo(vo, state.arrangedSlot);\n\n            return true;\n        }\n    }\n}","namespace mirage.core {\n    export function DefaultLayoutTree(): ILayoutTree {\n        return {\n            parent: null,\n            applyTemplate(): boolean {\n                return true;\n            },\n            propagateFlagUp(flag: LayoutFlags) {\n                for (var cur: LayoutNode = this.parent; !!cur && (cur.state.flags & flag) <= 0; cur = cur.tree.parent) {\n                    cur.state.flags |= flag;\n                }\n            },\n            walk(reverse?: boolean): ILayoutTreeWalker {\n                return {\n                    current: undefined,\n                    step(): boolean {\n                        return false;\n                    },\n                }\n            },\n        };\n    }\n}","namespace mirage.core {\n    export enum LayoutFlags {\n        none = 0,\n\n        measure = 1 << 1,\n        arrange = 1 << 2,\n\n        measureHint = 1 << 3,\n        arrangeHint = 1 << 4,\n        slotHint    = 1 << 5,\n        hints       = measureHint | arrangeHint | slotHint,\n    }\n}\n","namespace mirage.core {\n    export interface IMeasurer {\n        (availableSize: ISize): boolean;\n    }\n    export interface IMeasureOverride {\n        (coreSize: ISize): Size;\n    }\n\n    export function NewMeasurer(inputs: ILayoutNodeInputs, state: ILayoutNodeState, tree: ILayoutTree, override: IMeasureOverride): IMeasurer {\n        return function (availableSize: ISize): boolean {\n            // Validate\n            if (isNaN(availableSize.width) || isNaN(availableSize.height)) {\n                console.warn(\"[mirage] cannot call measure using a size with NaN values.\");\n                return false;\n            }\n            if (inputs.visible !== true) {\n                return false;\n            }\n\n            // Check need to measure\n            if ((state.flags & LayoutFlags.measure) <= 0) {\n                return false;\n            }\n            var last = state.lastAvailable;\n            if (!Size.isUndef(last) && last.width === availableSize.width && last.height === availableSize.height) {\n                return false;\n            }\n            Size.copyTo(availableSize, last);\n\n            // Apply Template\n            tree.applyTemplate();\n\n            // Invalidate downstream\n            state.flags |= (LayoutFlags.arrange | LayoutFlags.arrangeHint);\n\n            // Prepare for override\n            var framedSize = new Size(availableSize.width, availableSize.height);\n            Thickness.shrinkSize(inputs.margin, framedSize);\n            coerceSize(framedSize, inputs);\n\n            // Do override\n            var desired = override(framedSize);\n\n            // Complete override\n            state.flags &= ~LayoutFlags.measure;\n            Size.copyTo(desired, state.hiddenDesire);\n\n            // Finish desired\n            coerceSize(desired, inputs);\n            Thickness.growSize(inputs.margin, desired);\n\n            desired.width = Math.min(desired.width, availableSize.width);\n            desired.height = Math.min(desired.height, availableSize.height);\n            if (inputs.useLayoutRounding) {\n                Size.round(desired);\n            }\n            Size.copyTo(desired, state.desiredSize);\n\n            return true;\n        };\n    }\n}","namespace mirage.core {\n    export interface ISized {\n        width: number;\n        height: number;\n        minWidth: number;\n        minHeight: number;\n        maxWidth: number;\n        maxHeight: number;\n        useLayoutRounding: boolean;\n    }\n\n    export function coerceSize(size: ISize, inputs: ISized) {\n        var cw = Math.max(inputs.minWidth, size.width);\n        var ch = Math.max(inputs.minHeight, size.height);\n\n        if (!isNaN(inputs.width))\n            cw = inputs.width;\n\n        if (!isNaN(inputs.height))\n            ch = inputs.height;\n\n        cw = Math.max(Math.min(cw, inputs.maxWidth), inputs.minWidth);\n        ch = Math.max(Math.min(ch, inputs.maxHeight), inputs.minHeight);\n\n        if (inputs.useLayoutRounding) {\n            cw = Math.round(cw);\n            ch = Math.round(ch);\n        }\n\n        size.width = cw;\n        size.height = ch;\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    export interface IArrangeDrafter {\n        flush();\n        prepare(): boolean;\n        draft(): boolean;\n    }\n\n    export function NewArrangeDrafter(node: core.LayoutNode, rootSize: ISize): IArrangeDrafter {\n        var arrangeList: core.LayoutNode[] = [];\n\n        return {\n            flush() {\n                var cur: core.LayoutNode;\n                while ((cur = arrangeList.shift()) != null) {\n                    cur.tree.propagateFlagUp(LayoutFlags.arrangeHint);\n                }\n            },\n            prepare(): boolean {\n                for (var walker = node.walkDeep(); walker.step();) {\n                    var cur = walker.current;\n                    if (!cur.inputs.visible) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    if ((cur.state.flags & LayoutFlags.arrangeHint) === 0) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    cur.state.flags &= ~LayoutFlags.arrangeHint;\n                    if ((cur.state.flags & LayoutFlags.arrange) > 0) {\n                        arrangeList.push(cur);\n                    }\n                }\n                return arrangeList.length > 0;\n            },\n            draft(): boolean {\n                var cur: core.LayoutNode;\n                while ((cur = arrangeList.shift()) != null) {\n                    cur.doArrange(rootSize);\n                }\n                return true;\n            },\n        }\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    var MAX_COUNT = 255;\n\n    export interface IDrafter {\n        (): boolean;\n    }\n\n    export function NewDrafter(node: core.LayoutNode, rootSize: ISize): IDrafter {\n        var measure = NewMeasureDrafter(node, rootSize);\n        var arrange = NewArrangeDrafter(node, rootSize);\n        var slot = NewSlotDrafter(node);\n\n        /// Every pass at runDraft will exclusively run measure, arrange, or size\n        /// true should be returned if any updates were made\n        function runDraft(): boolean {\n            if (!node.inputs.visible)\n                return false;\n\n            arrange.flush();\n            slot.flush();\n\n            var flags = node.state.flags;\n            if ((flags & LayoutFlags.measureHint) > 0) {\n                return measure.prepare()\n                    && measure.draft();\n            }\n            if ((flags & LayoutFlags.arrangeHint) > 0) {\n                return arrange.prepare()\n                    && arrange.draft();\n            }\n            if ((flags & LayoutFlags.slotHint) > 0) {\n                return slot.prepare()\n                    && slot.draft()\n                    && slot.notify();\n            }\n\n            return false;\n        }\n\n        return function (): boolean {\n            if ((node.state.flags & LayoutFlags.hints) === 0)\n                return false;\n            var updated = false;\n            for (var count = 0; count < MAX_COUNT; count++) {\n                if (!runDraft())\n                    break;\n                updated = true;\n            }\n            if (count >= MAX_COUNT) {\n                console.error(\"[mirage] aborting infinite draft\");\n            }\n            return updated;\n        };\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    export interface IMeasureDrafter {\n        prepare(): boolean;\n        draft(): boolean;\n    }\n\n    export function NewMeasureDrafter(node: core.LayoutNode, rootSize: ISize): IMeasureDrafter {\n        var measureList: core.LayoutNode[] = [];\n\n        return {\n            prepare(): boolean {\n                for (var walker = node.walkDeep(); walker.step();) {\n                    var cur = walker.current;\n                    if (!cur.inputs.visible) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    if ((cur.state.flags & LayoutFlags.measureHint) === 0) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    cur.state.flags &= ~LayoutFlags.measureHint;\n                    if ((cur.state.flags & LayoutFlags.measure) > 0) {\n                        measureList.push(cur);\n                    }\n                }\n\n                return measureList.length > 0;\n            },\n            draft(): boolean {\n                var cur: core.LayoutNode;\n                while ((cur = measureList.shift()) != null) {\n                    cur.doMeasure();\n                }\n                return true;\n            },\n        };\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    export interface ISlotDrafter {\n        flush();\n        prepare(): boolean;\n        draft(): boolean;\n        notify(): boolean;\n    }\n\n    export interface ISlotUpdate {\n        node: core.LayoutNode;\n        oldRect: IRect;\n        newRect: IRect;\n    }\n\n    export function NewSlotDrafter(node: core.LayoutNode): ISlotDrafter {\n        var slotList: core.LayoutNode[] = [];\n        var slotUpdates: ISlotUpdate[] = [];\n\n        return {\n            flush() {\n                var cur: core.LayoutNode;\n                while ((cur = slotList.shift()) != null) {\n                    cur.tree.propagateFlagUp(LayoutFlags.slotHint);\n                }\n            },\n            prepare(): boolean {\n                for (var walker = node.walkDeep(); walker.step();) {\n                    var cur = walker.current;\n                    if (!cur.inputs.visible) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    if ((cur.state.flags & LayoutFlags.slotHint) === 0) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    cur.state.flags &= ~LayoutFlags.slotHint;\n                    if (!Rect.isUndef(cur.state.lastArrangedSlot)) {\n                        slotList.push(cur);\n                    }\n                }\n                return slotList.length > 0;\n            },\n            draft(): boolean {\n                var oldRect = new Rect();\n                var newRect = new Rect();\n                var cur: core.LayoutNode;\n                while ((cur = slotList.pop()) != null) {\n                    cur.slot(oldRect, newRect);\n                    if (!Rect.isEqual(oldRect, newRect)) {\n                        slotUpdates.push({\n                            node: cur,\n                            oldRect: oldRect,\n                            newRect: newRect,\n                        });\n                        oldRect = new Rect();\n                        newRect = new Rect();\n                    }\n                }\n                return slotUpdates.length > 0;\n            },\n            notify(): boolean {\n                adapters.updateSlots(slotUpdates);\n                return true;\n            }\n        };\n    }\n}","namespace mirage.grid {\n    export function NewGridArrangeOverride(inputs: IGridInputs, state: IGridState, tree: IPanelTree): core.IArrangeOverride {\n        var des = state.design.arrange;\n\n        return function (arrangeSize: ISize): ISize {\n            des.init(arrangeSize, inputs.columnDefinitions, inputs.rowDefinitions);\n\n            var cr = new Rect();\n            for (var walker = tree.walk(); walker.step();) {\n                var child = walker.current;\n                des.calcChildRect(cr, child);\n                child.arrange(cr);\n            }\n\n            return new Size(arrangeSize.width, arrangeSize.height);\n        };\n    }\n}","namespace mirage.grid {\n    export function NewGridMeasureOverride(inputs: IGridInputs, state: IGridState, tree: IPanelTree): core.IMeasureOverride {\n        var des = state.design.measure;\n\n        var overrideAutoAuto = design.NewMeasureOverridePass(design.MeasureOverridePass.autoAuto, des, tree);\n        var overrideStarAuto = design.NewMeasureOverridePass(design.MeasureOverridePass.starAuto, des, tree);\n        var overrideAutoStar = design.NewMeasureOverridePass(design.MeasureOverridePass.autoStar, des, tree);\n        var overrideStarAuto2 = design.NewMeasureOverridePass(design.MeasureOverridePass.starAutoAgain, des, tree);\n        var overrideNonStar = design.NewMeasureOverridePass(design.MeasureOverridePass.nonStar, des, tree);\n        var overrideRemainingStar = design.NewMeasureOverridePass(design.MeasureOverridePass.remainingStar, des, tree);\n\n        return function (constraint: ISize): ISize {\n            des.init(constraint, inputs.columnDefinitions, inputs.rowDefinitions, tree);\n            overrideAutoAuto();\n            overrideStarAuto();\n            overrideAutoStar();\n            overrideStarAuto2();\n            overrideNonStar();\n            overrideRemainingStar();\n            des.finish();\n            return des.getDesired();\n        };\n    }\n}","namespace mirage.grid.design {\n    export interface IGridArrangeDesign {\n        init(arrangeSize: ISize, coldefs: IColumnDefinition[], rowdefs: IRowDefinition[]);\n        calcChildRect(childRect: IRect, child: core.LayoutNode);\n    }\n\n    export function NewGridArrangeDesign(cm: Segment[][], rm: Segment[][]): IGridArrangeDesign {\n        return {\n            init(arrangeSize: ISize, coldefs: IColumnDefinition[], rowdefs: IRowDefinition[]) {\n                originalToOffered(cm);\n                originalToOffered(rm);\n\n                var consumed = new Size(helpers.calcDesiredToOffered(cm), helpers.calcDesiredToOffered(rm));\n\n                if (consumed.width !== arrangeSize.width) {\n                    helpers.expand(arrangeSize.width, cm);\n                }\n                if (consumed.height !== arrangeSize.height) {\n                    helpers.expand(arrangeSize.height, rm);\n                }\n\n                if (!!coldefs) {\n                    for (var i = 0; i < coldefs.length; i++) {\n                        coldefs[i].setActualWidth(cm[i][i].offered);\n                    }\n                }\n                if (!!rowdefs) {\n                    for (var i = 0; i < rowdefs.length; i++) {\n                        rowdefs[i].setActualHeight(rm[i][i].offered);\n                    }\n                }\n            },\n            calcChildRect(childRect: IRect, child: core.LayoutNode) {\n                Rect.clear(childRect);\n\n                var col = Grid.getColumn(child) || 0; //coerce NaN, undefined, null, 0 => 0\n                col = Math.min(col, cm.length - 1);\n\n                var colspan = Grid.getColumnSpan(child);\n                if (colspan !== 0)\n                    colspan = colspan || 1; //coerce NaN, undefined, null => 1\n                colspan = Math.min(colspan, cm.length - col);\n\n                var row = Grid.getRow(child) || 0; //coerce NaN, undefined, null, 0 => 0\n                row = Math.min(row, rm.length - 1);\n\n                var rowspan = Grid.getRowSpan(child);\n                if (rowspan !== 0)\n                    rowspan = rowspan || 1; //coerce NaN, undefined, null => 1\n                rowspan = Math.min(rowspan, rm.length - row);\n\n                for (var i = 0; i < col; i++) {\n                    childRect.x += cm[i][i].offered;\n                }\n                for (var i = col; i < col + colspan; i++) {\n                    childRect.width += cm[i][i].offered;\n                }\n\n                for (var i = 0; i < row; i++) {\n                    childRect.y += rm[i][i].offered;\n                }\n                for (var i = row; i < row + rowspan; i++) {\n                    childRect.height += rm[i][i].offered;\n                }\n            },\n        };\n    }\n\n    function originalToOffered(matrix: Segment[][]) {\n        for (var i = 0; i < matrix.length; i++) {\n            for (var j = 0; j <= i; j++) {\n                matrix[i][j].offered = matrix[i][j].original;\n            }\n        }\n    }\n}","namespace mirage.grid.design {\n    export interface IGridPlacement {\n        init();\n        add(isRow: boolean, start: number, span: number, size: number);\n        allocate(allocFunc: () => void);\n    }\n\n    interface IGridPlacementCell {\n        matrix: Segment[][];\n        start: number;\n        end: number;\n        size: number;\n    }\n\n    export function NewGridPlacement(cm: Segment[][], rm: Segment[][]): IGridPlacement {\n        var unicells: IGridPlacementCell[] = [];\n        var multicells: IGridPlacementCell[] = [];\n\n        return {\n            init() {\n                unicells.length = 0;\n                multicells.length = 0;\n            },\n            add(isRow: boolean, start: number, span: number, size: number) {\n                var item: IGridPlacementCell = {\n                    matrix: isRow ? rm : cm,\n                    start: start,\n                    end: start + span - 1,\n                    size: size,\n                };\n                if (item.start === item.end) {\n                    unicells.unshift(item);\n                } else {\n                    multicells.push(item);\n                }\n            },\n            allocate(allocFunc: () => void) {\n                var cell: IGridPlacementCell;\n                while ((cell = unicells.pop()) != null) {\n                    var i = cell.start;\n                    var j = cell.end;\n                    cell.matrix[i][j].desired = Math.max(cell.matrix[i][j].desired, cell.size);\n                    allocFunc();\n                }\n                while ((cell = multicells.pop()) != null) {\n                    var i = cell.start;\n                    var j = cell.end;\n                    cell.matrix[i][j].desired = Math.max(cell.matrix[i][j].desired, cell.size);\n                    allocFunc();\n                }\n            },\n        }\n    }\n}","namespace mirage.grid.design {\n    export interface IGridShape {\n        hasAutoAuto: boolean;\n        hasStarAuto: boolean;\n        hasAutoStar: boolean;\n    }\n\n    export function NewGridShape(childShapes: IGridChildShape[]): IGridShape {\n        var hasAutoAuto = false;\n        var hasStarAuto = false;\n        var hasAutoStar = false;\n\n        for (var i = 0; i < childShapes.length; i++) {\n            let cs = childShapes[i];\n            hasAutoAuto = hasAutoAuto || (cs.autoRow && cs.autoCol && !cs.starRow && !cs.starCol);\n            hasStarAuto = hasStarAuto || (cs.starRow && cs.autoCol);\n            hasAutoStar = hasAutoStar || (cs.autoRow && cs.starCol);\n        }\n\n        return {\n            hasAutoAuto: hasAutoAuto,\n            hasStarAuto: hasStarAuto,\n            hasAutoStar: hasAutoStar,\n        };\n    }\n\n    export interface IGridChildShape {\n        starRow: boolean;\n        autoRow: boolean;\n        starCol: boolean;\n        autoCol: boolean;\n\n        col: number;\n        row: number;\n        colspan: number;\n        rowspan: number;\n\n        init (child: core.LayoutNode, rm: Segment[][], cm: Segment[][]);\n        shouldMeasurePass (gridShape: IGridShape, childSize: ISize, pass: MeasureOverridePass): boolean;\n        calcConstraint (childSize: ISize, cm: Segment[][], rm: Segment[][]);\n    }\n\n    export class GridChildShape implements IGridChildShape {\n        starRow: boolean;\n        autoRow: boolean;\n        starCol: boolean;\n        autoCol: boolean;\n\n        col: number;\n        row: number;\n        colspan: number;\n        rowspan: number;\n\n        init(child: core.LayoutNode, cm: Segment[][], rm: Segment[][]) {\n            var col = this.col = Math.min(Grid.getColumn(child), cm.length - 1);\n            if (isNaN(col))\n                this.col = col = 0;\n            var row = this.row = Math.min(Grid.getRow(child), rm.length - 1);\n            if (isNaN(row))\n                this.row = row = 0;\n            var colspan = this.colspan = Math.min(Grid.getColumnSpan(child), cm.length - col);\n            if (isNaN(colspan))\n                this.colspan = colspan = 1;\n            var rowspan = this.rowspan = Math.min(Grid.getRowSpan(child), rm.length - row);\n            if (isNaN(rowspan))\n                this.rowspan = rowspan = 1;\n\n            this.starRow = this.autoRow = this.starCol = this.autoCol = false;\n\n            for (var i = row; i < row + rowspan; i++) {\n                this.starRow = this.starRow || (rm[i][i].type === GridUnitType.star);\n                this.autoRow = this.autoRow || (rm[i][i].type === GridUnitType.auto);\n            }\n            for (var i = col; i < col + colspan; i++) {\n                this.starCol = this.starCol || (cm[i][i].type === GridUnitType.star);\n                this.autoCol = this.autoCol || (cm[i][i].type === GridUnitType.auto);\n            }\n        }\n\n        shouldMeasurePass(gridShape: IGridShape, childSize: ISize, pass: MeasureOverridePass): boolean {\n            childSize.width = childSize.height = 0;\n\n            if (this.autoRow && this.autoCol && !this.starRow && !this.starCol) {\n                if (pass !== MeasureOverridePass.autoAuto)\n                    return false;\n                childSize.width = Number.POSITIVE_INFINITY;\n                childSize.height = Number.POSITIVE_INFINITY;\n                return true;\n            }\n\n            if (this.starRow && this.autoCol && !this.starCol) {\n                if (pass !== MeasureOverridePass.starAuto && pass !== MeasureOverridePass.starAutoAgain)\n                    return false;\n                if (pass === MeasureOverridePass.autoAuto && gridShape.hasAutoStar)\n                    childSize.height = Number.POSITIVE_INFINITY;\n                childSize.width = Number.POSITIVE_INFINITY;\n                return true;\n            }\n\n            if (this.autoRow && this.starCol && !this.starRow) {\n                if (pass !== MeasureOverridePass.autoStar)\n                    return false;\n                childSize.height = Number.POSITIVE_INFINITY;\n                return true;\n            }\n\n            if ((this.autoRow || this.autoCol) && !(this.starRow || this.starCol)) {\n                if (pass !== MeasureOverridePass.nonStar)\n                    return false;\n                if (this.autoRow)\n                    childSize.height = Number.POSITIVE_INFINITY;\n                if (this.autoCol)\n                    childSize.width = Number.POSITIVE_INFINITY;\n                return true;\n            }\n\n            if (!(this.starRow || this.starCol))\n                return pass === MeasureOverridePass.nonStar;\n\n            return pass === MeasureOverridePass.remainingStar;\n        }\n\n        calcConstraint(childSize: ISize, cm: Segment[][], rm: Segment[][]) {\n            for (var i = this.row; i < this.row + this.rowspan; i++) {\n                childSize.height += rm[i][i].offered;\n            }\n            for (var i = this.col; i < this.col + this.colspan; i++) {\n                childSize.width += cm[i][i].offered;\n            }\n        }\n    }\n}","namespace mirage.grid.design.helpers {\n    export function expand(available: number, mat: Segment[][]) {\n        for (var i = 0; i < mat.length; i++) {\n            var cur = mat[i][i];\n            if (cur.type === GridUnitType.star)\n                cur.offered = 0;\n            else\n                available = Math.max(available - cur.offered, 0);\n        }\n        assignSize(mat, 0, mat.length - 1, available, GridUnitType.star, false);\n\n        //TODO: setActualWidth, setActualHeight if star?\n    }\n\n    export function assignSize(mat: Segment[][], start: number, end: number, size: number, unitType: GridUnitType, desiredSize: boolean): number {\n        var count = 0;\n        var assigned = false;\n        var segmentSize = 0;\n        for (var i = start; i <= end; i++) {\n            let cur = mat[i][i];\n            segmentSize = desiredSize ? cur.desired : cur.offered;\n            if (segmentSize < cur.max)\n                count += (unitType === GridUnitType.star) ? cur.stars : 1;\n        }\n\n        do {\n            assigned = false;\n            let contribution = size / count;\n            for (var i = start; i <= end; i++) {\n                let cur = mat[i][i];\n                segmentSize = desiredSize ? cur.desired : cur.offered;\n                if (!(cur.type === unitType && segmentSize < cur.max))\n                    continue;\n                let newSize = segmentSize;\n                newSize += contribution * (unitType === GridUnitType.star ? cur.stars : 1);\n                newSize = Math.min(newSize, cur.max);\n                assigned = assigned || (newSize > segmentSize);\n                size -= newSize - segmentSize;\n                if (desiredSize)\n                    cur.desired = newSize;\n                else\n                    cur.offered = newSize;\n            }\n        } while (assigned);\n        return size;\n    }\n\n    export function calcDesiredToOffered(matrix: Segment[][]): number {\n        var total = 0;\n        for (var i = 0; i < matrix.length; i++) {\n            total += (matrix[i][i].offered = matrix[i][i].desired);\n        }\n        return total;\n    }\n}","namespace mirage.grid.design {\n    export interface IGridDesign {\n        measure: IGridMeasureDesign;\n        arrange: IGridArrangeDesign;\n    }\n\n    export function NewGridDesign(): IGridDesign {\n        var cm: Segment[][] = [];\n        var rm: Segment[][] = [];\n\n        return {\n            measure: NewGridMeasureDesign(cm, rm),\n            arrange: NewGridArrangeDesign(cm, rm),\n        };\n    }\n}","namespace mirage.grid.design {\n    export interface IGridMeasureDesign {\n        init(constraint: ISize, coldefs: IColumnDefinition[], rowdefs: IRowDefinition[], tree: IPanelTree);\n        measureChild(pass: MeasureOverridePass, index: number, child: core.LayoutNode);\n        finishPass();\n        finish();\n        getDesired(): ISize;\n    }\n\n    export function NewGridMeasureDesign(cm: Segment[][], rm: Segment[][]): IGridMeasureDesign {\n        var shape: IGridShape;\n        var childShapes: IGridChildShape[] = [];\n        var placement = NewGridPlacement(cm, rm);\n\n        return {\n            init(constraint: ISize, coldefs: IColumnDefinition[], rowdefs: IRowDefinition[], tree: IPanelTree) {\n                ensureMatrix(cm, !coldefs ? 1 : coldefs.length || 1);\n                ensureMatrix(rm, !rowdefs ? 1 : rowdefs.length || 1);\n                prepareCols(cm, coldefs);\n                prepareRows(rm, rowdefs);\n\n                var i = 0;\n                for (var walker = tree.walk(); walker.step(); i++) {\n                    var childShape: IGridChildShape;\n                    if (i < childShapes.length) {\n                        childShapes[i] = childShapes[i] || new GridChildShape();\n                    } else {\n                        childShapes.push(childShape = new GridChildShape());\n                    }\n                    childShape.init(walker.current, cm, rm);\n                }\n                if (i < childShapes.length)\n                    childShapes.slice(i, childShapes.length - i);\n                shape = NewGridShape(childShapes);\n\n                placement.init();\n\n                if (tree.children.length > 0) {\n                    helpers.expand(constraint.width, cm);\n                    helpers.expand(constraint.height, rm);\n                }\n\n            },\n            measureChild(pass: MeasureOverridePass, index: number, child: core.LayoutNode) {\n                var childShape = childShapes[index];\n\n                var childSize = new Size();\n                if (!childShape || !childShape.shouldMeasurePass(shape, childSize, pass))\n                    return;\n                childShape.calcConstraint(childSize, cm, rm);\n\n                child.measure(childSize);\n\n                var desired = child.state.desiredSize;\n                if (pass !== MeasureOverridePass.starAuto)\n                    placement.add(true, childShape.row, childShape.rowspan, desired.height);\n                placement.add(false, childShape.col, childShape.colspan, desired.width);\n            },\n            finishPass() {\n                placement.allocate(allocateDesiredSizeFunc(cm, rm));\n            },\n            finish() {\n                for (var i = 0; i < cm.length; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        cm[i][j].original = cm[i][j].offered;\n                    }\n                }\n                for (var i = 0; i < rm.length; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        rm[i][j].original = rm[i][j].offered;\n                    }\n                }\n            },\n            getDesired(): ISize {\n                var desired = new Size();\n                for (var i = 0; i < cm.length; i++) {\n                    desired.width += cm[i][i].desired;\n                }\n                for (var i = 0; i < rm.length; i++) {\n                    desired.height += rm[i][i].desired;\n                }\n                return desired;\n            },\n        }\n    }\n\n    var DEFAULT_GRID_LEN: IGridLength = {\n        value: 1.0,\n        type: GridUnitType.star\n    };\n\n    function ensureMatrix(matrix: Segment[][], defCount: number) {\n        if (matrix.length > defCount)\n            matrix.splice(defCount, matrix.length - defCount);\n        for (var i = 0; i < defCount; i++) {\n            if (matrix.length <= i)\n                matrix.push([]);\n            var mrow = matrix[i];\n            if (mrow.length > (i + 1))\n                mrow.splice(i, mrow.length - i - 1);\n            for (var ii = 0; ii <= i; ii++) {\n                if (mrow.length <= ii)\n                    mrow.push(new Segment());\n                else\n                    Segment.init(mrow[ii]);\n            }\n        }\n    }\n\n    function prepareCols(cm: Segment[][], coldefs: IColumnDefinition[]) {\n        if (!coldefs || coldefs.length === 0) {\n            var mcell = cm[0][0];\n            mcell.type = GridUnitType.star;\n            mcell.stars = 1.0;\n            return;\n        }\n\n        for (var i = 0; i < coldefs.length; i++) {\n            var colDef = coldefs[i];\n            var width = colDef.width || DEFAULT_GRID_LEN;\n            colDef.setActualWidth(Number.POSITIVE_INFINITY);\n\n            var cell = Segment.init(cm[i][i], 0.0, colDef.minWidth, colDef.maxWidth, width.type);\n            if (width.type === GridUnitType.pixel) {\n                cell.desired = cell.offered = cell.clamp(width.value);\n                colDef.setActualWidth(cell.desired);\n            } else if (width.type === GridUnitType.star) {\n                cell.stars = width.value;\n            } else if (width.type === GridUnitType.auto) {\n                cell.desired = cell.offered = cell.clamp(0);\n            }\n        }\n    }\n\n    function prepareRows(rm: Segment[][], rowdefs: IRowDefinition[]) {\n        if (!rowdefs || rowdefs.length === 0) {\n            var mcell = rm[0][0];\n            mcell.type = GridUnitType.star;\n            mcell.stars = 1.0;\n            return;\n        }\n\n        for (var i = 0; i < rowdefs.length; i++) {\n            var rowDef = rowdefs[i];\n            var height = rowDef.height || DEFAULT_GRID_LEN;\n            rowDef.setActualHeight(Number.POSITIVE_INFINITY);\n\n            var cell = Segment.init(rm[i][i], 0.0, rowDef.minHeight, rowDef.maxHeight, height.type);\n            if (height.type === GridUnitType.pixel) {\n                cell.desired = cell.offered = cell.clamp(height.value);\n                rowDef.setActualHeight(cell.desired);\n            } else if (height.type === GridUnitType.star) {\n                cell.stars = height.value;\n            } else if (height.type === GridUnitType.auto) {\n                cell.desired = cell.offered = cell.clamp(0);\n            }\n        }\n    }\n\n    function allocateDesiredSizeFunc(cm: Segment[][], rm: Segment[][]): () => void {\n        function hasStarInSpan(mat: Segment[][], start: number, end: number): boolean {\n            var spansStar = false;\n            for (var i = start; i >= end; i--) {\n                spansStar = spansStar || mat[i][i].type === GridUnitType.star;\n            }\n            return spansStar;\n        }\n\n        function calcDesired(mat: Segment[][], start: number, end: number): number {\n            var total = 0;\n            for (var i = start; i >= end; i--) {\n                total += mat[i][i].desired;\n            }\n            return total;\n        }\n\n        function allocSegments(mat: Segment[][]) {\n            var count = mat.length;\n            for (var start = count - 1; start >= 0; start--) {\n                for (var end = start; end >= 0; end--) {\n                    let hasStar = hasStarInSpan(mat, start, end);\n                    let cur = mat[start][end].desired;\n                    let total = calcDesired(mat, start, end);\n                    let additional = cur - total;\n                    if (additional > 0) {\n                        if (hasStar) {\n                            helpers.assignSize(mat, end, start, additional, GridUnitType.star, true);\n                        } else {\n                            helpers.assignSize(mat, end, start, additional, GridUnitType.pixel, true);\n                            helpers.assignSize(mat, end, start, additional, GridUnitType.auto, true);\n                        }\n                    }\n                }\n            }\n        }\n\n        return function () {\n            // Allocate heights then widths\n            allocSegments(rm);\n            allocSegments(cm);\n\n            helpers.calcDesiredToOffered(rm);\n            helpers.calcDesiredToOffered(cm);\n        };\n    }\n}","namespace mirage.grid.design {\n    export enum MeasureOverridePass {\n        autoAuto, //Child in auto row, auto col\n        starAuto, //Child in star row, auto col\n        autoStar, //Child in auto row, star col\n        starAutoAgain, //star row, auto col repeated\n        nonStar, //Child in auto/pixel row, auto/pixel col\n        remainingStar, //Child in ?\n    }\n\n    export function NewMeasureOverridePass(pass: MeasureOverridePass, des: IGridMeasureDesign, tree: IPanelTree) {\n        return function() {\n            for (var walker = tree.walk(), i = 0; walker.step(); i++) {\n                des.measureChild(pass, i, walker.current);\n            }\n            des.finishPass();\n        };\n    }\n}","module mirage.grid.design {\r\n    export class Segment {\r\n        desired: number = 0.0;\r\n        offered: number = 0.0;\r\n        original: number = 0.0;\r\n        min: number = 0.0;\r\n        max: number = Number.POSITIVE_INFINITY;\r\n        stars: number = 0;\r\n        type = GridUnitType.pixel;\r\n\r\n        clamp(value: number): number {\r\n            if (value < this.min)\r\n                return this.min;\r\n            if (value > this.max)\r\n                return this.max;\r\n            return value;\r\n        }\r\n\r\n        static init(segment: Segment, offered?: number, min?: number, max?: number, unitType?: GridUnitType): Segment {\r\n            segment.desired = 0.0;\r\n            segment.stars = 0;\r\n            segment.offered = offered || 0.0;\r\n            segment.min = min || 0.0;\r\n            segment.max = max != null ? max : Number.POSITIVE_INFINITY;\r\n            segment.type = unitType != null ? unitType : GridUnitType.pixel;\r\n\r\n            if (segment.offered < min)\r\n                segment.offered = min;\r\n            else if (segment.offered > max)\r\n                segment.offered = max;\r\n\r\n            return segment;\r\n        }\r\n    }\r\n}"],"sourceRoot":"/mirage"}