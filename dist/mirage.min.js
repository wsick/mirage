var mirage;!function(t){t.version="0.1.0"}(mirage||(mirage={}));var mirage;!function(t){var e=function(){function t(t,e,r,i){this.topLeft=null==t?0:t,this.topRight=null==e?0:e,this.bottomRight=null==r?0:r,this.bottomLeft=null==i?0:i}return t.isEmpty=function(t){return 0===t.topLeft&&0===t.topRight&&0===t.bottomRight&&0===t.bottomLeft},t.isEqual=function(t,e){return t.topLeft===e.topLeft&&t.topRight===e.topRight&&t.bottomRight===e.bottomRight&&t.bottomLeft===e.bottomLeft},t.clear=function(t){t.topLeft=t.topRight=t.bottomRight=t.bottomLeft=0},t.copyTo=function(t,e){e.topLeft=t.topLeft,e.topRight=t.topRight,e.bottomRight=t.bottomRight,e.bottomLeft=t.bottomLeft},t}();t.CornerRadius=e}(mirage||(mirage={}));var mirage;!function(t){!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right",t[t.Stretch=3]="Stretch"}(t.HorizontalAlignment||(t.HorizontalAlignment={}));t.HorizontalAlignment;!function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom",t[t.Stretch=3]="Stretch"}(t.VerticalAlignment||(t.VerticalAlignment={}));t.VerticalAlignment;!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(t.Orientation||(t.Orientation={}));t.Orientation}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){var r=function(){function r(){this.init()}return r.prototype.init=function(){Object.defineProperties(this,{inputs:{value:this.createInputs(),writable:!1},state:{value:this.createState(),writable:!1},tree:{value:this.createTree(),writable:!1}}),this.$measurer=this.createMeasurer(),this.$arranger=this.createArranger(),this.$measureBinder=e.NewMeasureBinder(this.state,this.tree,this.$measurer),this.$arrangeBinder=e.NewArrangeBinder(this.state,this.tree,this.$arranger)},r.prototype.createInputs=function(){return{visible:!0,useLayoutRounding:!0,margin:new t.Thickness,width:NaN,height:NaN,minWidth:0,minHeight:0,maxWidth:Number.POSITIVE_INFINITY,maxHeight:Number.POSITIVE_INFINITY,horizontalAlignment:t.HorizontalAlignment.Stretch,verticalAlignment:t.VerticalAlignment.Stretch}},r.prototype.createState=function(){return{flags:e.LayoutFlags.None,previousAvailable:new t.Size,desiredSize:new t.Size,hiddenDesire:new t.Size,layoutSlot:new t.Rect,visualOffset:new t.Point,arranged:new t.Size,lastArranged:new t.Size}},r.prototype.createTree=function(){return e.DefaultLayoutTree()},r.prototype.createMeasurer=function(){var t=this;return e.NewMeasurer(this.inputs,this.state,this.tree,function(e){return t.measureOverride(e)})},r.prototype.createArranger=function(){var t=this;return e.NewArranger(this.inputs,this.state,this.tree,function(e){return t.arrangeOverride(e)})},r.prototype.setParent=function(t){if(t){if(t===this.tree.parent)return;this.tree.parent=null,this.onDetached(),this.tree.parent=t,this.onAttached()}else{if(!this.tree.parent)return;this.tree.parent=null,this.onDetached()}},r.prototype.onDetached=function(){this.invalidateMeasure(),this.tree.parent&&this.tree.parent.invalidateMeasure(),t.Rect.clear(this.state.layoutSlot)},r.prototype.onAttached=function(){var r=this.state;t.Size.undef(r.previousAvailable),t.Size.clear(r.arranged),this.invalidateMeasure(),this.invalidateArrange(),((r.flags&e.LayoutFlags.SizeHint)>0||void 0!==r.lastArranged)&&this.tree.propagateFlagUp(e.LayoutFlags.SizeHint)},r.prototype.walkDeep=function(t){var e=void 0,r=[this];return{current:void 0,step:function(){if(e)for(var i=e.tree.walk(t);i.step();)r.unshift(i.current);return this.current=e=r.shift(),void 0!==this.current},skipBranch:function(){e=void 0}}},r.prototype.invalidateMeasure=function(){this.state.flags|=e.LayoutFlags.Measure|e.LayoutFlags.MeasureHint,this.tree.propagateFlagUp(e.LayoutFlags.MeasureHint)},r.prototype.doMeasure=function(){return this.$measureBinder()},r.prototype.measure=function(t){return this.$measurer(t)},r.prototype.measureOverride=function(e){for(var r=new t.Size,i=this.tree.walk();i.step();)i.current.measure(e),t.Size.max(r,i.current.state.desiredSize);return r},r.prototype.invalidateArrange=function(){this.state.flags|=e.LayoutFlags.Arrange|e.LayoutFlags.ArrangeHint,this.tree.propagateFlagUp(e.LayoutFlags.ArrangeHint)},r.prototype.doArrange=function(){return this.$arrangeBinder()},r.prototype.arrange=function(t){return this.$arranger(t)},r.prototype.arrangeOverride=function(e){for(var r=new t.Size(e.width,e.height),i=this.tree.walk();i.step();){var n=new t.Rect(0,0,e.width,e.height);i.current.arrange(n)}return r},r.prototype.sizing=function(e,r){var i=this.state;return i.lastArranged&&t.Size.copyTo(i.lastArranged,e),t.Size.copyTo(i.arranged,r),i.lastArranged=void 0,!0},r.prototype.onSizeChanged=function(t,e){},r}();e.LayoutNode=r}(e=t.core||(t.core={}))}(mirage||(mirage={}));var __extends=this&&this.__extends||function(t,e){function r(){this.constructor=t}for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},mirage;!function(t){function e(){var e=t.core.DefaultLayoutTree();return e.isLayoutContainer=!0,e.children=[],e.walk=function(t){if(t){var r=e.children.length;return{current:void 0,step:function(){return r--,r<0?(this.current=void 0,!1):(this.current=e.children[r],!0)}}}var r=-1;return{current:void 0,step:function(){return r++,r>=e.children.length?(this.current=void 0,!1):(this.current=e.children[r],!0)}}},e}var r=function(r){function i(){r.apply(this,arguments)}return __extends(i,r),i.prototype.createTree=function(){return e()},i.prototype.measureOverride=function(e){return new t.Size(e.width,e.height)},i.prototype.arrangeOverride=function(e){return new t.Size(e.width,e.height)},Object.defineProperty(i.prototype,"childCount",{get:function(){return this.tree.children.length},enumerable:!0,configurable:!0}),i.prototype.insertChild=function(t,e){var r=this.tree.children;e>=r.length?this.appendChild(t):e<=0?this.prependChild(t):(r.splice(e,0,t),t.setParent(this))},i.prototype.prependChild=function(t){this.tree.children.unshift(t),t.setParent(this)},i.prototype.appendChild=function(t){this.tree.children.push(t),t.setParent(this)},i.prototype.removeChild=function(t){var e=this.tree.children,r=e.indexOf(t);return!(r<0)&&(this.tree.children.splice(r,1),t.setParent(null),!0)},i.prototype.removeChildAt=function(t){var e=this.tree.children;if(t<0||t>=e.length)return null;var r=e.splice(t,1)[0];return r&&r.setParent(null),r},i.prototype.getChildAt=function(t){return this.tree.children[t]},i}(t.core.LayoutNode);t.Panel=r,t.NewPanelTree=e}(mirage||(mirage={}));var mirage;!function(t){var e=function(){function t(t,e){this.x=null==t?0:t,this.y=null==e?0:e}return t.isEqual=function(t,e){return t.x===e.x&&t.y===e.y},t.copyTo=function(t,e){e.x=t.x,e.y=t.y},t.round=function(t){t.x=Math.round(t.x),t.y=Math.round(t.y)},t}();t.Point=e}(mirage||(mirage={}));var mirage;!function(t){var e;e="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.vec2={create:function(t,r){var i=e(2);return i[0]=t,i[1]=r,i},init:function(t,r,i){return i||(i=e(2)),i[0]=t,i[1]=r,i}}}(mirage||(mirage={}));var vec2=mirage.vec2,mirage;!function(t){!function(t){t[t.Out=0]="Out",t[t.In=1]="In",t[t.Part=2]="Part"}(t.RectOverlap||(t.RectOverlap={}));var e=t.RectOverlap,r=t.vec2.create(0,0),i=t.vec2.create(0,0),n=t.vec2.create(0,0),a=t.vec2.create(0,0),o=function(){function o(t,e,r,i){this.x=null==t?0:t,this.y=null==e?0:e,this.width=null==r?0:r,this.height=null==i?0:i}return o.clear=function(t){t.x=t.y=t.width=t.height=0},o.getBottom=function(t){return t.y+t.height},o.getRight=function(t){return t.x+t.width},o.isEqual=function(t,e){return t.x===e.x&&t.y===e.y&&t.width===e.width&&t.height===e.height},o.isEmpty=function(t){return 0===t.width||0===t.height},o.copyTo=function(t,e){e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height},o.roundOut=function(t){var e=Math.floor(t.x),r=Math.floor(t.y);t.width=Math.ceil(t.x+t.width)-e,t.height=Math.ceil(t.y+t.height)-r,t.x=e,t.y=r},o.roundIn=function(t){var e=Math.ceil(t.x),r=Math.ceil(t.y);return t.width=Math.floor(t.x+t.width)-Math.ceil(t.x),t.height=Math.floor(t.y+t.height)-Math.ceil(t.y),t.x=e,t.y=r,t},o.intersection=function(t,e){var r=Math.max(t.x,e.x),i=Math.max(t.y,e.y);t.width=Math.max(0,Math.min(t.x+t.width,e.x+e.width)-r),t.height=Math.max(0,Math.min(t.y+t.height,e.y+e.height)-i),t.x=r,t.y=i},o.union=function(t,e){if(!(e.width<=0||e.height<=0)){if(t.width<=0||t.height<=0)return void o.copyTo(e,t);var r=Math.min(t.x,e.x),i=Math.min(t.y,e.y);t.width=Math.max(t.x+t.width,e.x+e.width)-r,t.height=Math.max(t.y+t.height,e.y+e.height)-i,t.x=r,t.y=i}},o.isContainedIn=function(t,e){var r=t.x,i=t.y,n=t.x+t.width,a=t.y+t.height,o=e.x,h=e.y,u=e.x+e.width,s=e.y+e.height;return!(r<o||i<h||r>u||i>s)&&!(n<o||a<h||n>u||a>s)},o.containsPoint=function(t,e){return t.x<=e.x&&t.y<=e.y&&t.x+t.width>=e.x&&t.y+t.height>=e.y},o.extendTo=function(t,e,r){var i=t.x,n=t.y,a=t.width,o=t.height;(e<i||e>i+a)&&(a=Math.max(Math.abs(e-i),Math.abs(e-i-a))),(r<n||r>n+o)&&(o=Math.max(Math.abs(r-n),Math.abs(r-n-o))),t.x=Math.min(i,e),t.y=Math.min(n,r),t.width=a,t.height=o},o.grow=function(t,e,r,i,n){return t.x-=e,t.y-=r,t.width+=e+i,t.height+=r+n,t.width<0&&(t.width=0),t.height<0&&(t.height=0),t},o.shrink=function(t,e,r,i,n){t.x+=e,t.y+=r,t.width-=e+i,t.height-=r+n,t.width<0&&(t.width=0),t.height<0&&(t.height=0)},o.rectIn=function(t,r){var i=new o;return o.copyTo(t,i),o.intersection(i,r),o.isEmpty(i)?e.Out:o.isEqual(i,r)?e.In:e.Part},o.transform=function(e,o){if(!o)return e;var h=e.x,u=e.y,s=e.width,f=e.height;t.vec2.init(h,u,r),t.vec2.init(h+s,u,i),t.vec2.init(h+s,u+f,n),t.vec2.init(h,u+f,a),t.mat3.transformVec2(o,r),t.mat3.transformVec2(o,i),t.mat3.transformVec2(o,n),t.mat3.transformVec2(o,a);var c=Math.min(r[0],i[0],n[0],a[0]),M=Math.min(r[1],i[1],n[1],a[1]),g=Math.max(r[0],i[0],n[0],a[0]),l=Math.max(r[1],i[1],n[1],a[1]);return e.x=c,e.y=M,e.width=g-c,e.height=l-M,e},o.transform4=function(t,e){},o}();t.Rect=o}(mirage||(mirage={}));var mirage;!function(t){var e=function(){function t(t,e){this.width=null==t?0:t,this.height=null==e?0:e}return t.copyTo=function(t,e){e.width=t.width,e.height=t.height},t.isEqual=function(t,e){return t.width===e.width&&t.height===e.height},t.isEmpty=function(t){return 0===t.width||0===t.height},t.max=function(t,e){t.width=Math.max(t.width,e.width),t.height=Math.max(t.height,e.height)},t.min=function(t,e){t.width=Math.min(t.width,e.width),t.height=Math.min(t.height,e.height)},t.round=function(t){t.width=Math.round(t.width),t.height=Math.round(t.height)},t.isUndef=function(t){return isNaN(t.width)&&isNaN(t.height)},t.clear=function(t){t.width=0,t.height=0},t.undef=function(t){t.width=NaN,t.height=NaN},t}();t.Size=e}(mirage||(mirage={}));var mirage;!function(t){var e=function(e){function r(){e.apply(this,arguments)}return __extends(r,e),r.prototype.createInputs=function(){var r=e.prototype.createInputs.call(this);return r.orientation=t.Orientation.Horizontal,r},r.prototype.measureOverride=function(e){return this.inputs.orientation===t.Orientation.Vertical?this.measureVertical(e):this.measureHorizontal(e)},r.prototype.measureVertical=function(e){var r=new t.Size(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),i=new t.Size,n=this.inputs;r.width=e.width,isNaN(n.width)||(r.width=n.width),r.width=Math.min(r.width,n.maxWidth),r.width=Math.max(r.width,n.minWidth);for(var a=this.tree.walk();a.step();){var o=a.current;o.measure(r);var h=o.state.desiredSize;i.height+=h.height,i.width=Math.max(i.width,h.width)}return i},r.prototype.measureHorizontal=function(e){var r=new t.Size(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),i=new t.Size,n=this.inputs;r.height=e.height,isNaN(n.height)||(r.height=n.height),r.height=Math.min(r.height,n.maxHeight),r.height=Math.max(r.height,n.minHeight);for(var a=this.tree.walk();a.step();){var o=a.current;o.measure(r);var h=o.state.desiredSize;i.width+=h.width,i.height=Math.max(i.height,h.height)}return i},r.prototype.arrangeOverride=function(e){return this.inputs.orientation===t.Orientation.Vertical?this.arrangeVertical(e):this.arrangeHorizontal(e)},r.prototype.arrangeVertical=function(e){for(var r=new t.Size(e.width,0),i=this.tree.walk();i.step();){var n=i.current,a=n.state.desiredSize,o=new t.Rect(0,r.height,e.width,a.height);t.Rect.isEmpty(o)&&t.Rect.clear(o),n.arrange(o),r.width=Math.max(r.width,e.width),r.height+=a.height}return r.height=Math.max(r.height,e.height),r},r.prototype.arrangeHorizontal=function(e){for(var r=new t.Size(0,e.height),i=this.tree.walk();i.step();){var n=i.current,a=n.state.desiredSize,o=new t.Rect(r.width,0,a.width,e.height);t.Rect.isEmpty(o)&&t.Rect.clear(o),n.arrange(o),r.width+=a.width,r.height=Math.max(r.height,e.height)}return r.width=Math.max(r.width,e.width),r},r}(t.Panel);t.StackPanel=e}(mirage||(mirage={}));var mirage;!function(t){var e=function(){function t(t,e,r,i){this.left=null==t?0:t,this.top=null==e?0:e,this.right=null==r?0:r,this.bottom=null==i?0:i}return t.add=function(t,e){t.left+=e.left,t.top+=e.top,t.right+=e.right,t.bottom+=e.bottom},t.copyTo=function(t,e){e.left=t.left,e.top=t.top,e.right=t.right,e.bottom=t.bottom},t.isEmpty=function(t){return 0===t.left&&0===t.top&&0===t.right&&0===t.bottom},t.isBalanced=function(t){return t.left===t.top&&t.left===t.right&&t.left===t.bottom},t.shrinkSize=function(t,e){var r=e.width,i=e.height;return r!=Number.POSITIVE_INFINITY&&(r-=t.left+t.right),i!=Number.POSITIVE_INFINITY&&(i-=t.top+t.bottom),e.width=r>0?r:0,e.height=i>0?i:0,e},t.shrinkRect=function(t,e){e.x+=t.left,e.y+=t.top,e.width-=t.left+t.right,e.height-=t.top+t.bottom,e.width<0&&(e.width=0),e.height<0&&(e.height=0)},t.shrinkCornerRadius=function(t,e){e.topLeft=Math.max(e.topLeft-.5*Math.max(t.left,t.top),0),e.topRight=Math.max(e.topRight-.5*Math.max(t.right,t.top),0),e.bottomRight=Math.max(e.bottomRight-.5*Math.max(t.right,t.bottom),0),e.bottomLeft=Math.max(e.bottomLeft-.5*Math.max(t.left,t.bottom),0)},t.growSize=function(t,e){var r=e.width,i=e.height;return r!=Number.POSITIVE_INFINITY&&(r+=t.left+t.right),i!=Number.POSITIVE_INFINITY&&(i+=t.top+t.bottom),e.width=r>0?r:0,e.height=i>0?i:0,e},t.growRect=function(t,e){e.x-=t.left,e.y-=t.top,e.width+=t.left+t.right,e.height+=t.top+t.bottom,e.width<0&&(e.width=0),e.height<0&&(e.height=0)},t.growCornerRadius=function(t,e){e.topLeft=e.topLeft?Math.max(e.topLeft+.5*Math.max(t.left,t.top),0):0,e.topRight=e.topRight?Math.max(e.topRight+.5*Math.max(t.right,t.top),0):0,e.bottomRight=e.bottomRight?Math.max(e.bottomRight+.5*Math.max(t.right,t.bottom),0):0,e.bottomLeft=e.bottomLeft?Math.max(e.bottomLeft+.5*Math.max(t.left,t.bottom),0):0},t}();t.Thickness=e}(mirage||(mirage={}));var mirage;!function(t){var e;!function(t){function e(t,e){return[t,e]}function r(t){return t[0]=-t[0],t[1]=-t[1],t}function i(t){var e=t[0],r=t[1];return t[0]=-r,t[1]=e,t}function n(t){var e=t[0],r=t[1],i=Math.sqrt(e*e+r*r);return t[0]=e/i,t[1]=r/i,t}function a(t,e){var r=Math.cos(e),i=Math.sin(e),n=t[0],a=t[1];return t[0]=n*r-a*i,t[1]=n*i+a*r,t}function o(t,e){var r=t[0],i=t[1],n=e[0],a=e[1],o=r*n+i*a,h=Math.sqrt(r*r+i*i)*Math.sqrt(n*n+a*a);return Math.acos(o/h)}function h(t,e){var r=o(t,e),i=n(t.slice(0)),h=n(e.slice(0));a(i,r);var u=Math.abs(i[0]-h[0]),f=Math.abs(i[1]-h[1]);return u<s&&f<s}function u(t,e,r,i){var n=t[0],a=t[1],o=n+e[0],h=a+e[1],u=r[0],s=r[1],f=u+i[0],c=s+i[1],M=(n-o)*(s-c)-(a-h)*(u-f);if(0===M)return null;var g=(n*h-a*o)*(u-f)-(n-o)*(u*c-s*f),l=(n*h-a*o)*(s-c)-(a-h)*(u*c-s*f);return[g/M,l/M]}var s=1e-10;t.create=e,t.reverse=r,t.orthogonal=i,t.normalize=n,t.rotate=a,t.angleBetween=o,t.isClockwiseTo=h,t.intersection=u}(e=t.Vector||(t.Vector={}))}(mirage||(mirage={}));var mirage;!function(t){!function(t){t[t.Visible=0]="Visible",t[t.Collapsed=1]="Collapsed"}(t.Visibility||(t.Visibility={}));t.Visibility}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){function r(t,e,r){return function(){var i=t.layoutSlot||void 0;return i?r(i):(e.parent&&e.parent.invalidateArrange(),!1)}}function i(r,i,n,a){return function(o){if(r.visible!==!0)return!1;var h=new t.Rect;if(r.useLayoutRounding?(h.x=Math.round(o.x),h.y=Math.round(o.y),h.width=Math.round(o.width),h.height=Math.round(o.height)):t.Rect.copyTo(o,h),h.width<0||h.height<0||!isFinite(h.width)||!isFinite(h.height)||isNaN(h.x)||isNaN(h.y)||isNaN(h.width)||isNaN(h.height))return console.warn("[mirage] cannot call arrange using rect with NaN/infinite values."),!1;if((i.flags&e.LayoutFlags.Arrange)<=0)return!1;if(t.Rect.isEqual(i.layoutSlot,h))return!1;t.Rect.copyTo(h,i.layoutSlot),t.Thickness.shrinkRect(r.margin,h);var u=new t.Size(h.width,h.height);e.coerceSize(u,r);var s=new t.Size;e.coerceSize(s,r),r.horizontalAlignment===t.HorizontalAlignment.Stretch&&(s.width=Math.max(s.width,u.width)),r.verticalAlignment===t.VerticalAlignment.Stretch&&(s.height=Math.max(s.height,u.height));var f=new t.Size(i.hiddenDesire.width,i.hiddenDesire.height);t.Size.max(f,s);var c=a(f);i.flags&=~e.LayoutFlags.Arrange,r.useLayoutRounding&&t.Size.round(c);var M=new t.Size(c.width,c.height);e.coerceSize(M,r),t.Size.min(M,c);var g=i.visualOffset;switch(t.Point.copyTo(h,g),r.horizontalAlignment){case t.HorizontalAlignment.Left:break;case t.HorizontalAlignment.Right:g.x+=h.width-M.width;break;case t.HorizontalAlignment.Center:g.x+=.5*(h.width-M.width);break;default:g.x+=Math.max(.5*(h.width-M.width),0)}switch(r.verticalAlignment){case t.VerticalAlignment.Top:break;case t.VerticalAlignment.Bottom:g.y+=h.height-M.height;break;case t.VerticalAlignment.Center:g.y+=.5*(h.height-M.height);break;default:g.y+=Math.max(.5*(h.height-M.height),0)}r.useLayoutRounding&&t.Point.round(g);var l=i.arranged;return t.Size.isEqual(l,c)||(t.Size.copyTo(l,i.lastArranged),i.flags|=e.LayoutFlags.SizeHint,n.propagateFlagUp(e.LayoutFlags.SizeHint)),t.Size.copyTo(c,i.arranged),!0}}e.NewArrangeBinder=r,e.NewArranger=i}(e=t.core||(t.core={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(t){function e(){return{isContainer:!0,isLayoutContainer:!1,parent:null,applyTemplate:function(){return!0},propagateFlagUp:function(t){for(var e=this.parent;e&&(e.state.flags&t)<=0;e=e.tree.parent)e.state.flags|=t},walk:function(t){return{current:void 0,step:function(){return!1}}}}}t.DefaultLayoutTree=e}(e=t.core||(t.core={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(t){!function(t){t[t.None=0]="None",t[t.Measure=2]="Measure",t[t.Arrange=4]="Arrange",t[t.MeasureHint=8]="MeasureHint",t[t.ArrangeHint=16]="ArrangeHint",t[t.SizeHint=32]="SizeHint",t[t.Hints=56]="Hints"}(t.LayoutFlags||(t.LayoutFlags={}));t.LayoutFlags}(e=t.core||(t.core={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){function r(r,i,n){return function(){var a=r.previousAvailable;t.Size.isUndef(a)&&!i.parent&&i.isLayoutContainer&&(a.width=a.height=Number.POSITIVE_INFINITY);var o=!1;if(!t.Size.isUndef(a)){var h=new t.Size;if(t.Size.copyTo(r.desiredSize,h),o=n(a),t.Size.isEqual(h,r.desiredSize))return o}return i.parent&&i.parent.invalidateMeasure(),r.flags&=~e.LayoutFlags.Measure,o}}function i(r,i,n,a){return function(o){if(isNaN(o.width)||isNaN(o.height))return console.warn("[mirage] cannot call measure using a size with NaN values."),!1;if(r.visible!==!0)return!1;if(n.applyTemplate(),(i.flags&e.LayoutFlags.Measure)<=0)return!1;var h=i.previousAvailable;if(!t.Size.isUndef(h)&&h.width===o.width&&h.height===o.height)return!1;i.flags|=e.LayoutFlags.Arrange|e.LayoutFlags.ArrangeHint;var u=new t.Size(o.width,o.height);t.Thickness.shrinkSize(r.margin,u),e.coerceSize(u,r);var s=a(u);return i.flags&=~e.LayoutFlags.Measure,t.Size.copyTo(s,i.hiddenDesire),e.coerceSize(s,r),t.Thickness.growSize(r.margin,s),s.width=Math.min(s.width,o.width),s.height=Math.min(s.height,o.height),r.useLayoutRounding&&t.Size.round(s),t.Size.copyTo(s,i.desiredSize),!0}}e.NewMeasureBinder=r,e.NewMeasurer=i}(e=t.core||(t.core={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(t){function e(t,e){var r=Math.max(e.minWidth,t.width),i=Math.max(e.minHeight,t.height);isNaN(e.width)||(r=e.width),isNaN(e.height)||(i=e.height),r=Math.max(Math.min(r,e.maxWidth),e.minWidth),i=Math.max(Math.min(i,e.maxHeight),e.minHeight),e.useLayoutRounding&&(r=Math.round(r),i=Math.round(i)),t.width=r,t.height=i}t.coerceSize=e}(e=t.core||(t.core={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){function r(t){var e=[];return{flush:function(){for(var t;null!=(t=e.shift());)t.tree.propagateFlagUp(i.ArrangeHint)},prepare:function(){for(var r=t.walkDeep();r.step();){var n=r.current;n.inputs.visible&&0!==(n.state.flags&i.ArrangeHint)?(n.state.flags&=~i.ArrangeHint,(n.state.flags&i.Arrange)>0&&e.push(n)):r.skipBranch()}return e.length>0},draft:function(){for(var t;null!=(t=e.shift());)t.doArrange();return!0}}}var i=t.core.LayoutFlags;e.NewArrangeDrafter=r}(e=t.draft||(t.draft={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){function r(t,r){function a(){if(!t.inputs.visible)return!1;h.flush(),u.flush();var e=t.state.flags;return(e&i.MeasureHint)>0?o.prepare()&&o.draft():(e&i.ArrangeHint)>0?h.prepare()&&h.draft():(e&i.SizeHint)>0&&(u.prepare()&&u.draft()&&u.notify())}var o=e.NewMeasureDrafter(t,r),h=e.NewArrangeDrafter(t),u=e.NewSizeDrafter(t);return function(){if(0===(t.state.flags&i.Hints))return!1;for(var e=!1,r=0;r<n&&a();r++)e=!0;return r>=n&&console.error("[mirage] aborting infinite draft"),e}}var i=t.core.LayoutFlags,n=255;e.NewDrafter=r}(e=t.draft||(t.draft={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){function r(e,r){var n=[];return{prepare:function(){var a=e.state.previousAvailable;!e.tree.isContainer||!t.Size.isUndef(a)&&t.Size.isEqual(a,r)||(e.state.flags|=i.Measure,t.Size.copyTo(r,e.state.previousAvailable));for(var o=e.walkDeep();o.step();){var h=o.current;h.inputs.visible&&0!==(h.state.flags&i.MeasureHint)?(h.state.flags&=~i.MeasureHint,(h.state.flags&i.Measure)>0&&n.push(h)):o.skipBranch()}return n.length>0},draft:function(){for(var t;null!=(t=n.shift());)t.doMeasure();return!0}}}var i=t.core.LayoutFlags;e.NewMeasureDrafter=r}(e=t.draft||(t.draft={}))}(mirage||(mirage={}));var mirage;!function(t){var e;!function(e){function r(e){var r=[],n=[];return{flush:function(){for(var t;null!=(t=r.shift());)t.tree.propagateFlagUp(i.SizeHint)},prepare:function(){for(var t=e.walkDeep();t.step();){var n=t.current;n.inputs.visible&&0!==(n.state.flags&i.SizeHint)?(n.state.flags&=~i.SizeHint,void 0!==n.state.lastArranged&&r.push(n)):t.skipBranch()}return r.length>0},draft:function(){for(var e,i=new t.Size,a=new t.Size;null!=(e=r.pop());)e.sizing(i,a),t.Size.isEqual(i,a)||(n.push({node:e,oldSize:i,newSize:a}),i=new t.Size,a=new t.Size);return n.length>0},notify:function(){for(var t;null!=(t=n.pop());)t.node.onSizeChanged(t.oldSize,t.newSize);return!0}}}var i=t.core.LayoutFlags;e.NewSizeDrafter=r}(e=t.draft||(t.draft={}))}(mirage||(mirage={}));var mirage;!function(t){function e(t,e){var r=t[0];if(Math.abs(r)<n)return null;var i=t[3];if(Math.abs(i)<n)return null;e?(e[1]=t[1],e[2]=t[2]):e=t;var a=-t[4],o=-t[5];return Math.abs(r-1)>n&&(r=1/r,a*=r),Math.abs(i-1)>n&&(i=1/i,o*=i),e[0]=r,e[3]=i,e[4]=a,e[5]=o,e}function r(t,e){e||(e=t);var r=t[0],i=t[1],n=t[2],a=t[3],o=r*a-i*n;if(0===o||!isFinite(o))return null;var h=1/o,u=t[4],s=t[5];return e[0]=a*h,e[1]=-i*h,e[2]=-n*h,e[3]=r*h,e[4]=(n*s-a*u)*h,e[5]=(i*u-r*s)*h,e}var i,n=1e-6;i="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.mat3={create:function(t){var e=i(6);return t?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5]):e[0]=e[1]=e[2]=e[3]=e[4]=e[5]=0,e},copyTo:function(t,e){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e},init:function(t,e,r,i,n,a,o){return t[0]=e,t[1]=r,t[2]=i,t[3]=n,t[4]=a,t[5]=o,t},identity:function(e){return e||(e=t.mat3.create()),e[0]=1,e[1]=0,e[2]=0,e[3]=1,e[4]=0,e[5]=0,e},equal:function(t,e){return t===e||Math.abs(t[0]-e[0])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[3]-e[3])<n&&Math.abs(t[4]-e[4])<n&&Math.abs(t[5]-e[5])<n},multiply:function(t,e,r){r||(r=t);var i=t[0],n=t[1],a=t[2],o=t[3],h=t[4],u=t[5],s=e[0],f=e[1],c=e[2],M=e[3],g=e[4],l=e[5];return r[0]=i*s+n*c,r[1]=i*f+n*M,r[2]=a*s+o*c,r[3]=a*f+o*M,r[4]=h*s+u*c+g,r[5]=h*f+u*M+l,r},inverse:function(t,i){return Math.abs(t[1])<n&&Math.abs(t[2])<n?e(t,i):r(t,i)},transformVec2:function(t,e,r){r||(r=e);var i=e[0],n=e[1];return r[0]=t[0]*i+t[2]*n+t[4],r[1]=t[1]*i+t[3]*n+t[5],r},createTranslate:function(e,r,i){return i||(i=t.mat3.create()),i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=e,i[5]=r,i},translate:function(t,e,r){return t[4]+=e,t[5]+=r,t},createScale:function(e,r,i){return i||(i=t.mat3.create()),i[0]=e,i[1]=0,i[2]=0,i[3]=r,i[4]=0,i[5]=0,i},scale:function(t,e,r){return t[0]*=e,t[2]*=e,t[4]*=e,t[1]*=r,t[3]*=r,t[5]*=r,t},createRotate:function(e,r){r||(r=t.mat3.create());var i=Math.cos(e),n=Math.sin(e);return r[0]=i,r[1]=n,r[2]=-n,r[3]=i,r[4]=0,r[5]=0,r},createSkew:function(e,r,i){return i||(i=t.mat3.create()),i[0]=1,i[1]=Math.tan(r),i[2]=Math.tan(e),i[3]=1,i[4]=0,i[5]=0,i},preapply:function(e,r){return t.mat3.multiply(r,e,e)},apply:function(e,r){return t.mat3.multiply(e,r,e)}}}(mirage||(mirage={}));var mat3=mirage.mat3,mirage;!function(t){var e;!function(t){t[t.M11=0]="M11",t[t.M12=1]="M12",t[t.M13=2]="M13",t[t.M14=3]="M14",t[t.M21=4]="M21",t[t.M22=5]="M22",t[t.M23=6]="M23",t[t.M24=7]="M24",t[t.M31=8]="M31",t[t.M32=9]="M32",t[t.M33=10]="M33",t[t.M34=11]="M34",t[t.OffsetX=12]="OffsetX",t[t.OffsetY=13]="OffsetY",t[t.OffsetZ=14]="OffsetZ",t[t.M44=15]="M44"}(e||(e={}));var r,i=1e-6;r="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.mat4={create:function(t){var i=r(16);return t&&(i[e.M11]=t[e.M11],i[e.M12]=t[e.M12],i[e.M13]=t[e.M13],i[e.M14]=t[e.M14],i[e.M21]=t[e.M21],i[e.M22]=t[e.M22],i[e.M23]=t[e.M23],i[e.M24]=t[e.M24],i[e.M31]=t[e.M31],i[e.M32]=t[e.M32],i[e.M33]=t[e.M33],i[e.M34]=t[e.M34],i[e.OffsetX]=t[e.OffsetX],i[e.OffsetY]=t[e.OffsetY],i[e.OffsetZ]=t[e.OffsetZ],i[e.M44]=t[e.M44]),i},copyTo:function(t,r){return r[e.M11]=t[e.M11],r[e.M12]=t[e.M12],r[e.M13]=t[e.M13],r[e.M14]=t[e.M14],r[e.M21]=t[e.M21],r[e.M22]=t[e.M22],r[e.M23]=t[e.M23],r[e.M24]=t[e.M24],r[e.M31]=t[e.M31],r[e.M32]=t[e.M32],r[e.M33]=t[e.M33],r[e.M34]=t[e.M34],r[e.OffsetX]=t[e.OffsetX],r[e.OffsetY]=t[e.OffsetY],r[e.OffsetZ]=t[e.OffsetZ],r[e.M44]=t[e.M44],r},identity:function(r){return r||(r=t.mat4.create()),r[e.M11]=1,r[e.M12]=0,r[e.M13]=0,r[e.M14]=0,r[e.M21]=0,r[e.M22]=1,r[e.M23]=0,r[e.M24]=0,r[e.M31]=0,r[e.M32]=0,r[e.M33]=1,r[e.M34]=0,r[e.OffsetX]=0,r[e.OffsetY]=0,r[e.OffsetZ]=0,r[e.M44]=1,r},equal:function(t,r){return t===r||Math.abs(t[e.M11]-r[e.M11])<i&&Math.abs(t[e.M12]-r[e.M12])<i&&Math.abs(t[e.M13]-r[e.M13])<i&&Math.abs(t[e.M14]-r[e.M14])<i&&Math.abs(t[e.M21]-r[e.M21])<i&&Math.abs(t[e.M22]-r[e.M22])<i&&Math.abs(t[e.M23]-r[e.M23])<i&&Math.abs(t[e.M24]-r[e.M24])<i&&Math.abs(t[e.M31]-r[e.M31])<i&&Math.abs(t[e.M32]-r[e.M32])<i&&Math.abs(t[e.M33]-r[e.M33])<i&&Math.abs(t[e.M34]-r[e.M34])<i&&Math.abs(t[e.OffsetX]-r[e.OffsetX])<i&&Math.abs(t[e.OffsetY]-r[e.OffsetY])<i&&Math.abs(t[e.OffsetZ]-r[e.OffsetZ])<i&&Math.abs(t[e.M44]-r[e.M44])<i},multiply:function(t,r,i){i||(i=t);var n=t[e.M11],a=t[e.M12],o=t[e.M13],h=t[e.M14],u=t[e.M21],s=t[e.M22],f=t[e.M23],c=t[e.M24],M=t[e.M31],g=t[e.M32],l=t[e.M33],d=t[e.M34],m=t[e.OffsetX],p=t[e.OffsetY],v=t[e.OffsetZ],w=t[e.M44],y=r[e.M11],b=r[e.M12],S=r[e.M13],x=r[e.M14],O=r[e.M21],z=r[e.M22],N=r[e.M23],A=r[e.M24],L=r[e.M31],I=r[e.M32],R=r[e.M33],T=r[e.M34],F=r[e.OffsetX],H=r[e.OffsetY],V=r[e.OffsetZ],k=r[e.M44];return i[e.M11]=n*y+a*O+o*L+h*F,i[e.M12]=n*b+a*z+o*I+h*H,i[e.M13]=n*S+a*N+o*R+h*V,i[e.M14]=n*x+a*A+o*T+h*k,i[e.M21]=u*y+s*O+f*L+c*F,i[e.M22]=u*b+s*z+f*I+c*H,i[e.M23]=u*S+s*N+f*R+c*V,i[e.M24]=u*x+s*A+f*T+c*k,i[e.M31]=M*y+g*O+l*L+d*F,i[e.M32]=M*b+g*z+l*I+d*H,i[e.M33]=M*S+g*N+l*R+d*V,i[e.M34]=M*x+g*A+l*T+d*k,i[e.OffsetX]=m*y+p*O+v*L+w*F,i[e.OffsetY]=m*b+p*z+v*I+w*H,i[e.OffsetZ]=m*S+p*N+v*R+w*V,i[e.M44]=m*x+p*A+v*T+w*k,i},inverse:function(t,r){r||(r=t);var i=t[e.M11],n=t[e.M12],a=t[e.M13],o=t[e.M14],h=t[e.M21],u=t[e.M22],s=t[e.M23],f=t[e.M24],c=t[e.M31],M=t[e.M32],g=t[e.M33],l=t[e.M34],d=t[e.OffsetX],m=t[e.OffsetY],p=t[e.OffsetZ],v=t[e.M44],w=i*u-n*h,y=i*s-a*h,b=i*f-o*h,S=n*s-a*u,x=n*f-o*u,O=a*f-o*s,z=c*m-M*d,N=c*p-g*d,A=c*v-l*d,L=M*p-g*m,I=M*v-l*m,R=g*v-l*p,T=w*R-y*I+b*L+S*A-x*N+O*z;if(!isFinite(T)||!T)return null;var F=1/T;return r[e.M11]=(u*R-s*I+f*L)*F,r[e.M12]=(-n*R+a*I-o*L)*F,r[e.M13]=(m*O-p*x+v*S)*F,r[e.M14]=(-M*O+g*x-l*S)*F,r[e.M21]=(-h*R+s*A-f*N)*F,r[e.M22]=(i*R-a*A+o*N)*F,r[e.M23]=(-d*O+p*b-v*y)*F,r[e.M24]=(c*O-g*b+l*y)*F,r[e.M31]=(h*I-u*A+f*z)*F,r[e.M32]=(-i*I+n*A-o*z)*F,r[e.M33]=(d*x-m*b+v*w)*F,r[e.M34]=(-c*x+M*b-l*w)*F,r[e.OffsetX]=(-h*L+u*N-s*z)*F,r[e.OffsetY]=(i*L-n*N+a*z)*F,r[e.OffsetZ]=(-d*S+m*y-p*w)*F,r[e.M44]=(c*S-M*y+g*w)*F,r},transpose:function(t,r){r||(r=t);var i=t[e.M11],n=t[e.M12],a=t[e.M13],o=t[e.M14],h=t[e.M21],u=t[e.M22],s=t[e.M23],f=t[e.M24],c=t[e.M31],M=t[e.M32],g=t[e.M33],l=t[e.M34],d=t[e.OffsetX],m=t[e.OffsetY],p=t[e.OffsetZ],v=t[e.M44];return r[e.M11]=i,r[e.M21]=n,r[e.M31]=a,r[e.OffsetX]=o,r[e.M12]=h,r[e.M22]=u,r[e.M32]=s,r[e.OffsetY]=f,r[e.M13]=c,r[e.M23]=M,r[e.M33]=g,r[e.OffsetZ]=l,r[e.M14]=d,r[e.M24]=m,r[e.M34]=p,r[e.M44]=v,r},transformVec4:function(t,r,i){i||(i=r);var n=r[0],a=r[1],o=r[2],h=r[3],u=t[e.M11],s=t[e.M12],f=t[e.M13],c=t[e.M14],M=t[e.M21],g=t[e.M22],l=t[e.M23],d=t[e.M24],m=t[e.M31],p=t[e.M32],v=t[e.M33],w=t[e.M34],y=t[e.OffsetX],b=t[e.OffsetY],S=t[e.OffsetZ],x=t[e.M44];return i[0]=u*n+s*a+f*o+c*h,i[1]=M*n+g*a+l*o+d*h,i[2]=m*n+p*a+v*o+w*h,i[3]=y*n+b*a+S*o+x*h,i},createTranslate:function(r,i,n,a){return a||(a=t.mat4.create()),a[e.M11]=1,a[e.M12]=0,a[e.M13]=0,a[e.M14]=0,a[e.M21]=0,a[e.M22]=1,a[e.M23]=0,a[e.M24]=0,a[e.M31]=0,a[e.M32]=0,a[e.M33]=1,a[e.M34]=0,a[e.OffsetX]=r,a[e.OffsetY]=i,a[e.OffsetZ]=n,a[e.M44]=1,a},createScale:function(r,i,n,a){return a||(a=t.mat4.create()),a[e.M11]=r,a[e.M12]=0,a[e.M13]=0,a[e.M14]=0,a[e.M11]=0,a[e.M12]=i,a[e.M13]=0,a[e.M14]=0,a[e.M31]=0,a[e.M32]=0,a[e.M33]=n,a[e.M34]=0,a[e.OffsetX]=0,a[e.OffsetY]=0,a[e.OffsetZ]=0,a[e.M44]=1,a},createRotateX:function(r,i){i||(i=t.mat4.create());var n=Math.sin(r),a=Math.cos(r);return i[e.M11]=1,i[e.M12]=0,i[e.M13]=0,i[e.M14]=0,i[e.M21]=0,i[e.M22]=a,i[e.M23]=n,i[e.M24]=0,i[e.M31]=0,i[e.M32]=-n,i[e.M33]=a,i[e.M34]=0,i[e.OffsetX]=0,i[e.OffsetY]=0,i[e.OffsetZ]=0,i[e.M44]=1,i},createRotateY:function(r,i){i||(i=t.mat4.create());var n=Math.sin(r),a=Math.cos(r);return i[e.M11]=a,i[e.M12]=0,i[e.M13]=-n,i[e.M14]=0,i[e.M21]=0,i[e.M22]=1,i[e.M23]=0,i[e.M24]=0,i[e.M31]=n,i[e.M32]=0,i[e.M33]=a,i[e.M34]=0,i[e.OffsetX]=0,i[e.OffsetY]=0,i[e.OffsetZ]=0,i[e.M44]=1,i},createRotateZ:function(r,i){i||(i=t.mat4.create());var n=Math.sin(r),a=Math.cos(r);return i[e.M11]=a,i[e.M12]=n,i[e.M13]=0,i[e.M14]=0,i[e.M21]=-n,i[e.M22]=a,i[e.M23]=0,i[e.M24]=0,i[e.M31]=0,i[e.M32]=0,i[e.M33]=1,i[e.M34]=0,i[e.OffsetX]=0,i[e.OffsetY]=0,i[e.OffsetZ]=0,i[e.M44]=1,i},createPerspective:function(r,i,n,a,o){o||(o=t.mat4.create());var h=1/Math.tan(r/2),u=h/i,s=n-a;return o[e.M11]=u,o[e.M12]=0,o[e.M13]=0,o[e.M14]=0,o[e.M21]=0,o[e.M22]=h,o[e.M23]=0,o[e.M24]=0,o[e.M31]=0,o[e.M32]=0,o[e.M33]=a/s,o[e.M34]=-1,o[e.OffsetX]=0,o[e.OffsetY]=0,o[e.OffsetZ]=n*a/s,o[e.M44]=0,o},createViewport:function(r,i,n){return n||(n=t.mat4.create()),n[e.M11]=r/2,n[e.M12]=0,n[e.M13]=0,n[e.M14]=0,n[e.M21]=0,n[e.M22]=-i/2,n[e.M23]=0,n[e.M24]=0,n[e.M31]=0,n[e.M32]=0,n[e.M33]=1,n[e.M34]=0,n[e.OffsetX]=r/2,n[e.OffsetY]=i/2,n[e.OffsetZ]=0,n[e.M44]=1,n}}}(mirage||(mirage={}));var mat4=mirage.mat4,mirage;!function(t){t.Rect.transform4=function(t,e){console.warn("[Rect.transform4] Not implemented")}}(mirage||(mirage={}));var mirage;!function(t){var e;e="undefined"!=typeof Float32Array?function(t){return new Float32Array(t)}:function(t){return new Array(t)},t.vec4={create:function(t,r,i,n){var a=e(4);return a[0]=t,a[1]=r,a[2]=i,a[3]=n,a},init:function(t,r,i,n,a){return a||(a=e(4)),a[0]=t,a[1]=r,a[2]=i,a[3]=n,a}}}(mirage||(mirage={}));var vec4=mirage.vec4;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
